<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/chart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/smile.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/copy.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/pen.css' rel='stylesheet'>
    <title>Supplier</title>
    <link rel="stylesheet" href="/Supplier.css">
</head>
<body id="body">

    <header>
        

          
 
    </header>

    <div class="flexx">
    <div class="nav">
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

        <div class="we">
        <a class="bb" href="/products">
            <div class="te">
                <h5 class="test">Products</h5>
            </div>
        </a>

        <a class="bb" href="/inventory">
            <div class="te">
                <h5 class="test">Inventory</h5>
            </div>
        </a>

        <a class="bb" href="/reports">
            <div class="te">
                <h5 class="test">Reports</h5>
            </div>
        </a>

        <a class="bb" href="/supplier">
            <div class="te" id="currentPage">
                <h5 class="test">Supplier</h5>
            </div>
        </a>

        <a class="bb" href="/transactions">
            <div class="te">
                <h5 class="test" id="accBtn">Transactions</h5>
            </div>
        </a>

        <a class="bb" href="/logs">
            <div class="te">
                <h5 class="test">Logs</h5>
            </div>
        </a>

        <a class="bb" href="/account">
            <div class="te">
                <h5 class="test" id="accBtn">Accounts</h5>
            </div>
        </a>
    </div>
    </div>
    
    <main>
        <div class="title-con">
       <h1 id="title">SUPPLIER</h1>
    </div>
        <input type="hidden" name="action" value="saveEditedRow">
        

        

        <div class="table-container">

            <div id = "prodTableContainer">
            <div class="search-date">

                <form action="/products" method ="get">
                <input type="search" id="search" name = "query" placeholder="enter product name or id">
                <button type = "submit" style="display: none;">Search</button>

                </form>
               <!-- <p id="date">-->
                    <!-- Date is dynamically rendered from JS -->
               <!--  </p> -->


            </div>
            
            <table id ="productTable">

                <thead>
                <tr>
                    <th>SUPPLIER</th>
                    <th>BRAND</th>
                    <th>SUPPLIER CONTACT</th>
                    <th>ACTION</th>
                </tr>
            </thead>
              
            <% if(suppliers.length > 0) { %>
                <% suppliers.forEach((supplier,index) => { %>
            <tr class = "database-row">

                
                <input type="hidden" name="action" value="saveEditedRow">
                <td><input type="text" contenteditable="true" name ="supplierName"  value="<%= supplier.supplierName %>" disabled></td>
                <td><input type="text" contenteditable="true" name = "brandName"  value="<%= supplier.brandName %>" disabled></td>
                <td><input type="number" contenteditable="true" name = "supplierContact"  value="<%= supplier.supplierContact %>" disabled></td>
             
        
             <!--   <td><button type ="button" onclick="submitRow(this)" class="saveBtn">Save</button></td> -->
             <td> <button class="editBtn" id="<%= supplier._id %>" data-target="#editModal_<%= supplier._id %>" type="button" onclick="openEditModal('<%= supplier._id %>')">UPDATE</button>
             </td>
               
               
                
             <div id="editModal_<%= supplier._id %>" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeEditModal('<%= supplier._id%>')">X</span>
                    <h2>Edit Product</h2>
                    <form id="editForm" method="post" action="supplier/<%= supplier._id %>">
                        <label for="supplierName">Supplier Name:</label>
                        <input type="text" id="supplierName_<%= supplier._id %>" name="supplierName" value="<%= supplier.supplierName %>"><br><br>
        
                        <label for="brandName">Brand:</label>
                        <input type="text" id="brandName_<%= supplier._id %>" name="brandName" value="<%= supplier.brandName%>"><br><br>
        
                        <label for="supplierContact">Supplier Contact:</label>
                        <input type="number" id="supplierContact_<%= supplier._id %>" name="supplierContact" value="<%= supplier.supplierContact %>"><br><br>
        
                    
                        <button id="modalSubmit" type="submit">Save</button>
                    </form>
                </div>
            </div>



            
                
            </tr>
            
            <% }) %>

            <%} else { %>
                <p>There are no suppliers yet...</p>
            
            <% } %>   
                            

                
            </table>

        </div>
           
        

     
        <div class="save-addproduct">
            <button class="addBtn" id= "addRowButton">ADD SUPPLIER</button>
        </div>

        <div id="myModal" class="modal">
            <!-- Modal content -->
            <div class="modal-content">
              <span id="close">X</span>
              <h2>Add New Supplier</h2>
              <!-- Your form content for adding a new product -->
              <form id="productForm">
                <label for="supplierName">Supplier Name:</label>
                <input type="text" id="supplierName" name="supplierName" required><br><br>

                <label for="brandName">Brand: </label>
                <input type="text" id="brandName" name="brandName" required><br><br>

                <label for="supplierContact">Supplier Contact: </label>
                <input type="text" id="supplierContact" name="supplierContact" required><br><br>

                
                <!-- Add other input fields as needed -->
        
                <button type="submit" id="modalSubmit">Add</button>
              </form>
            </div>
          </div>

    
      
                <!-- Edit button -->
       
        <!-- Modal for editing -->
       

            
        </div>

    </main> 

    </div>


    <script>

  // Select all elements with class 'editBtn'
let editBtns = document.querySelectorAll(".editBtn");


let idLastClicked;
// Loop through each button and attach an event listener
editBtns.forEach(button => {
    button.addEventListener("click", (e) => {
        console.log(e.target.id);
        idLastClicked = e.target.id
    
    });
});

let productForm = document.getElementById('productForm')
let accBtn = document.getElementById("accBtn")
productForm.addEventListener('submit', function () {

    const supplierName = document.getElementById('supplierName').value;
    const brandName = document.getElementById('brandName').value;
    const supplierContact = document.getElementById('supplierContact').value;

  // Prepare the data object to send to the server
  const data = {
    supplierName: supplierName,
    brandName: brandName,
    supplierContact: supplierContact,
  };

  // Send the form data to the backend using fetch
  fetch('/supplier', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  })
    .then(response => {
      if (response.ok) {
        // Handle success, e.g., close the modal and perform any UI updates
        const modal = document.getElementById('myModal');
        modal.style.display = 'none';
        // Perform any other necessary actions upon successful addition of a new product
      } else {
        // Handle errors if the request fails
        console.error('Error adding product');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
});


   // Get the modal
const modal = document.getElementById('myModal');
const editModal = document.getElementById(`editModal`);

// Get the button that opens the modal
const btn = document.getElementById('addRowButton');

// Get the <span> element that closes the modal
const span = document.getElementById("close")

// When the user clicks the button, open the modal
btn.onclick = function () {
  modal.style.display = 'block';
  editModal.style.display = 'block';
};

// When the user clicks on <span> (x), close the modal
span.onclick = function () {
  modal.style.display = 'none';
  editModal.style.display = 'none';
};

// When the user clicks anywhere outside of the modal, close it
window.onclick = function (event) {
  if (event.target === modal || event.target === editModal ) {
    modal.style.display = 'none';
    editModal.style.display = 'none';
  }
};


function openEditModal(supplierId) {
  const modal = document.getElementById(`editModal_${supplierId}`);
  if (modal) {
    modal.style.display = 'block';

    const editForm = document.getElementById('editForm');
    let supplierName = document.getElementById(`supplierName_${supplierId}`);
    let brandName = document.getElementById(`brandName_${supplierId}`);
    let supplierContact = document.getElementById(`supplierContact_${supplierId}`);


// Assuming this code runs after the creation or update of the form
console.log("EDITCODE", editCodeID.value)

editForm.addEventListener("submit", (event) => {

    console.log("EDITCODE", editCodeID.value)
console.log("put sub")
    // Get the updated values from the form fields
    const updatedData = {
        supplierName: supplierName.value,
        brandName: brandName.value,
        supplierContact: supplierContact.value,
    };

    fetch(`/supplier/${supplierId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedData)
    })
    .then(response => {
        if (response.ok) {
            // Handle success
            return response.json(); // Parse the response body as JSON
        } else {
            throw new Error('Error updating product');
        }
    })
    .then(data => {
        // Here 'data' contains the updated product from the server
        console.log(data.updatedProduct);
        // Perform actions with the updated product data as needed
        const editModal = document.getElementById('editModal');
        // Close the modal, update UI, etc.
        location.reload()
    })
    .catch(error => {
        location.reload()
    });

    event.preventDefault();
});
  }
}
// Function to close the edit modal
function closeEditModal(productId) {
  const modal = document.getElementById(`editModal_${idLastClicked}`);
  if (modal) {
    modal.style.display = 'none';
  }
}
// Function to save the edited data (you'll need to implement this)
function saveEditedData() {
  // Retrieve the edited data from the form fields
  const editedProductName = document.getElementById('productNameEdit').value;
  // Retrieve other edited data similarly

  // Perform actions to save the edited data (e.g., send it to the server via AJAX)
  // Implement your logic to save the edited data
  // ...

  // Close the edit modal after saving the changes
  closeEditModal();
}




//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}



        
        document.getElementById("saveproductbtn").addEventListener("click", 
            
            function() {
            document.getElementById("saveProduct").submit();
            }
         );
        
      

        // Function to add a new row to the table
        /* function addRow() {
            const tableBody = document.querySelector("#productTable2 tbody");
            const newRow = tableBody.insertRow();

            // Add cells (columns) to the new row
                const code = newRow.insertCell(0);
                const productName = newRow.insertCell(1);
                const unitCost = newRow.insertCell(2);
                const unitPrice = newRow.insertCell(3);
                const lowStockThreshold = newRow.insertCell(4);
                const startingInventory = newRow.insertCell(5);
                const status = newRow.insertCell(6);
                const bt = newRow.insertCell(7);

            // Create input elements for each cell
            const codeInput = document.createElement("input");
            codeInput.type = "text";
            codeInput.name = "code[]"; // Use an array to collect multiple names
            code.appendChild(codeInput);

            const productInput = document.createElement("input");
            productInput.type = "text";
            productInput.name = "productName[]"; // Use an array to collect multiple emails
            productName.appendChild(productInput);

            const costInput = document.createElement("input");
            costInput.type = "number";
            costInput.name = "unitCost[]"; // Use an array to collect multiple emails
            unitCost.appendChild(costInput);

            const priceInput = document.createElement("input");
            priceInput.type = "number";
            priceInput.name = "unitPrice[]"; // Use an array to collect multiple emails
            unitPrice.appendChild(priceInput);

            const lowStockInput = document.createElement("input");
            lowStockInput.type = "number";
            lowStockInput.name = "lowStockThreshold[]"; // Use an array to collect multiple emails
            lowStockThreshold.appendChild(lowStockInput);

            const startInvInput = document.createElement("input");
            startInvInput.type = "number";
            startInvInput.name = "startingInventory[]"; // Use an array to collect multiple emails
            startingInventory.appendChild(startInvInput);

            const statusInput = document.createElement("input");
            statusInput.type = "range";
            statusInput.max = "1";
            statusInput.min = "0";
            statusInput.name = "status[]"; // Use an array to collect multiple emails
            status.appendChild(statusInput);

            const button = document.createElement("button");
            button.textContent = "Save"
            button.classList.add("saveBtn")
            bt.appendChild(button);

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "block";

            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "none";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "block";
        }
 */
        
        function hideNewRow(){

            var table = document.getElementById("productTable2");

                    // Clear all rows by removing them one by one
                    while (table.rows.length > 0) {
                        table.deleteRow(0);
                    }
           
            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "block";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "none";

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "none"; 
        }

        
        function submitRow(button){
            // Traverse the DOM to find the row
            var row = button.closest('div');
            
            // Find the form in the row (assuming the form is in the same row)
            var form = row.querySelector('form');
            
            // Submit the form
            form.submit();
        }

       function handleStatusChange(input) {
    // Get the row of the changed input
    var row = input.parentNode.parentNode;

    // Get the value of the status input
    var statusValue = input.value;

    // If the status is changed to 0, set other columns (except code and productName) to -1
    if (statusValue === '0') {
        // Get the lowStockThreshold input in the row
        var lowStockThresholdInput = row.querySelector('input[name^="lowStockThreshold"]');
        
        // Set the value of the lowStockThreshold input to -1
        if (lowStockThresholdInput) {
            lowStockThresholdInput.value = '-1';
        }

        // Get all the input elements in the row, excluding lowStockThreshold
        var otherInputs = row.querySelectorAll('input[name^="unitCost"], input[name^="unitPrice"], input[name^="startingInventory"]');
        
        // Set the value of each input to 0
        otherInputs.forEach(function (input) {
            input.value = '0';
        });
    }
}

    if (localStorage.getItem("TOKEN") === null) {
        document.getElementById("body").style.display = "none"
        alert("You don't have permission to access this page.");
            window.history.back();
    }

  


        // Event listener for the "Add Row" button
       /*  document.querySelector("#addRowButton").addEventListener("click", addRow); */
        document.querySelector("#cancelProduct").addEventListener("click", hideNewRow);

    
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "flex"
        } else {
            console.log("Should not")
            accBtn.style.display = "none"
        }
    }

        </script>
    </body>
</html>
