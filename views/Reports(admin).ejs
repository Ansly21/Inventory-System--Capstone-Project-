<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/shopping-cart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/danger.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/chart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/smile.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/copy.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/pen.css' rel='stylesheet'>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>

    <link rel="stylesheet" href="/Reports (Admin).css">
    <title>Reports (Admin)</title>
     <!-- Include Chart.js from CDN -->
     <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body id="body">

    <header>
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

            <h1 id="title">REPORTS</h1>
 
    </header>

    <main>
        <div class="nav">
            <a href="/products">
                <button>
                    Products<i class="gg-pen"></i>
                </button>
            </a>

            <a href="/inventory">
                <button>
                        Inventory
                        <i class="gg-copy"></i>
                </button>
            </a>

            <a href="/reports">
                <button class="page-btn">Reports<i class="gg-chart"></i></button>
            </a>

            <a href="account">
                <button>Accounts<i class="gg-smile"></i></button>
            </a>
        </div>



        <div class="right-side">
            <section>
                <div class="info-container totalProductsContainer">
                    <i class="bi bi-cart-plus"></i>
                    <div class="info">
                        <p class="info-title">Total Products</p>
                        <p class="info-num"><%= totalProducts %></p>
                    </div>
                </div>

                <div class="info-container lowStockContainer">
                    <i class="bi bi-exclamation-circle"></i>
                    <div class="info">
                        <p class="info-title">Low Stock</p>
                        <p class="info-num"><%= lowStock %></p>
                    </div>
                </div>
                <div class="info-container stockValueContainer">
                    <i class="bi bi-coin"></i>
                    <div class="info">
                        <p class="info-title">Stock Value (₱)</p>
                        <p class="info-num"><%= stockValue %></p>
                    </div>
                </div>

                <div class="info-container stockCostContainer">
                    <i class="bi bi-cash-stack"></i>
                    <div class="info">
                        <p class="info-title">Stock Cost (₱)</p>
                        <p class="info-num"><%= stockCost %></p>
                    </div>
                </div>
            </section>
           
            <select name="" id="selectOptions" class="selectOptions">
                <option value="sample">Choose</option>
                <option value="lowstock">Low Stock</option>
                <option value="bestSeller">Best Seller</option>
                <option value="leastSeller">Least Seller</option>
                <option value="topRevenue">Top Revenue</option>
                <option value="leastRevenue">Least Revenue</option>
            </select>

            <div class="table-container" id="table-container">
                <!-- DYNAMICALLY RENDER TABLE-->

                
            </div>
        </div>

        <div id="productCodeElement"><%= lowStockCodes[0].code %></div>

    </main>


    <script src="https://kit.fontawesome.com/b0d1390b7c.js" crossorigin="anonymous"></script>
    <canvas id="myChart" width="60" height="15"></canvas>

    <script>


//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}


  

    
let productCodeValue =document.getElementById('productCodeElement').innerText;



var option;

    //TABLE CODE
    //CONVERT LOW STOCK DATA TO ARRAYS    
    let lowStockNameArray = '<%= lowStockName %>'.split(',');
    let closingInvArray = '<%= closingInv %>'.split(',');
    let lowStockThresholdArray = '<%= lowStockThreshold %>'.split(',');
    
    //CONVERT LEAST SELLER DATA TO ARRAYS
    let leastSelectedSoldArray = '<%= leastSelectedValuesSold %>'.split(',')
    let leastSelectedNameArray = '<%= leastSelectedValuesName %>'.split(',')

    //CONVERT TOP SELLER DATA TO ARRAYS
    let topSellerNameArray = '<%= topSellerName %>'.split(',')
    let topSellerValueArray = '<%= topSellerValue %>'.split(',')


   let productCode = '<%= lowStockCodes %>'.split(',')

   let bestSellerCodeArray = '<%= bestSellerCodes %>'.split(',')
   
   let leastSellerCodeArray = '<%= leastSellerCodes %>'.split(',')

   //TOP REVENUE
    let topRevenueCode = '<%= topRevenueCodes %>'.split(',')
    let topRevenueNames =  '<%= revenueProductName %>'.split(',')
    let topRevenueValues =  '<%= revenueValue %>'.split(',')

    //LEAST REVENUE
    let leastRevenueCode = '<%= leastRevenueCodes %>'.split(',')
    let leastRevenueNames =  '<%= leastRevenueProductName %>'.split(',')
    let leastRevenueValues =  '<%= leastRevenueValue %>'.split(',')

        
    document.getElementById("selectOptions").addEventListener("change", () => {
    console.log("Dropdown selection changed"); // Check if this log appears in the console
    // option = document.getElementById("selectOptions").value
    //console.log(option);
    

    // Rest of your code for generating the table...
});

    document.getElementById("selectOptions").addEventListener("change", () => {
        if (document.getElementById("selectOptions").value === "lowstock") {
            // Assuming lowStockNameArray, closingInvArray, and lowStockThresholdArray are already available as arrays
            const lowStockName = lowStockNameArray;
            const closingInv = closingInvArray;
            const lowStockThreshold = lowStockThresholdArray;

            const tableContainer = document.getElementById('table-container');
            const table = document.createElement('table');
            table.id = "report-table"
            table.innerHTML = `
                <caption>LOW STOCK TABLE</caption>
                <tr>
                    <th>Code</th>
                    <th>Product Name</th>
                    <th>Current Stock</th>
                    <th>Low Stock Threshold</th>
                </tr>
            `;

          for (let index = 0; index < lowStockName.length; index++) {
    const row = table.insertRow();
    row.innerHTML = `
        <td>${productCode[index]}</td>
        <td>${lowStockName[index]}</td>
        <td>${closingInv[index]}</td>
        <td>${lowStockThreshold[index]}</td>
    `;

    table.appendChild(row);
}

            // Clear previous table, if any, and append the new table
            tableContainer.innerHTML = '';
            tableContainer.appendChild(table);


            // ... your previous code for displaying the table

        // Create the download button
        const downloadContainer = document.createElement('div');
        downloadContainer.classList.add('download-container');
        downloadContainer.innerHTML = `
            <button id="downloadBtn">Download as PDF</button>
        `;

        // Append the download button after the table
        tableContainer.appendChild(downloadContainer);

window.jsPDF = window.jspdf.jsPDF;
document.getElementById("downloadBtn").addEventListener("click", () => {
    const doc = new jsPDF();

    // Set font size for the table content and caption
    const fontSize = 20; // Change this value to adjust the font size for the table
    const captionFontSize = 30; // Change this value to adjust the caption font size

    const styles = {
        fontSize: fontSize,
        // Add more styling options as needed
    };

    // Convert table to PDF format with adjusted font size
    doc.autoTable({ html: '#report-table', styles: styles });

    // Add caption to the PDF and center it horizontally
    const captionText = "LOW STOCK TABLE";
    const pageWidth = doc.internal.pageSize.width;
    const textWidth = doc.getStringUnitWidth(captionText) * captionFontSize / doc.internal.scaleFactor;
    const textOffset = (pageWidth - textWidth) / 2;

    doc.setFontSize(captionFontSize); // Set the caption font size
    doc.text(captionText, textOffset, 10); // Centered caption position

    // Save the PDF file
    doc.save('table.pdf');
});



    } else if (document.getElementById("selectOptions").value === "leastSeller") {
        const leastSellerName = leastSelectedNameArray;
        const leastSellerValue = leastSelectedSoldArray;

            const tableContainer = document.getElementById('table-container');
            const table = document.createElement('table');
            table.id = "report-table"
            table.innerHTML = `
                <caption>Least Seller Table</caption>
                <tr>
                    <th>Code</th>
                    <th>Product Name</th>
                    <th>QTY Sold</th>
                </tr>
            `;

            leastSellerName.forEach((item, index) => {
                const row = table.insertRow();
                row.innerHTML = `
                <td>${leastSellerCodeArray[index]}</td>
                    <td>${item}</td>
                    <td>${leastSellerValue[index]}</td>
                `;
                
                table.appendChild(row);

            });

            // Clear previous table, if any, and append the new table
            tableContainer.innerHTML = '';
            tableContainer.appendChild(table);


            // ... your previous code for displaying the table

        // Create the download button
        const downloadContainer = document.createElement('div');
        downloadContainer.classList.add('download-container');
        downloadContainer.innerHTML = `
            <button id="downloadBtn">Download as PDF</button>
        `;

        // Append the download button after the table
        tableContainer.appendChild(downloadContainer);


window.jsPDF = window.jspdf.jsPDF;
document.getElementById("downloadBtn").addEventListener("click", () => {
    const doc = new jsPDF();

    // Set font size for the table content and caption
    const fontSize = 20; // Change this value to adjust the font size for the table
    const captionFontSize = 30; // Change this value to adjust the caption font size

    const styles = {
        fontSize: fontSize,
        // Add more styling options as needed
    };

    // Convert table to PDF format with adjusted font size
    doc.autoTable({ html: '#report-table', styles: styles });

    // Add caption to the PDF and center it horizontally
    const captionText = "LEAST SELLER TABLE";
    const pageWidth = doc.internal.pageSize.width;
    const textWidth = doc.getStringUnitWidth(captionText) * captionFontSize / doc.internal.scaleFactor;
    const textOffset = (pageWidth - textWidth) / 2;

    doc.setFontSize(captionFontSize); // Set the caption font size
    doc.text(captionText, textOffset, 10); // Centered caption position

    // Save the PDF file
    doc.save('table.pdf');
});

    } else if (document.getElementById("selectOptions").value === "bestSeller") {
        const bestSellerName = topSellerArrayName;
        const bestSellerValue = topSellerArrayValue;

            const tableContainer = document.getElementById('table-container');
            const table = document.createElement('table');
            table.id = "report-table"
            table.innerHTML = `
                <caption>Best Seller Table</caption>
                <tr>
                    <th>Code</th>
                    <th>Product Name</th>
                    <th>QTY Sold</th>
                </tr>
            `;

            bestSellerName.forEach((item, index) => {
                const row = table.insertRow();
                row.innerHTML = `
                    <td>${bestSellerCodeArray[index]}</td>
                    <td>${item}</td>
                    <td>${bestSellerValue[index]}</td>
                `;
                
                table.appendChild(row);

            });

            // Clear previous table, if any, and append the new table
            tableContainer.innerHTML = '';
            tableContainer.appendChild(table);


            // ... your previous code for displaying the table

        // Create the download button
        const downloadContainer = document.createElement('div');
        downloadContainer.classList.add('download-container');
        downloadContainer.innerHTML = `
            <button id="downloadBtn">Download as PDF</button>
        `;

        // Append the download button after the table
        tableContainer.appendChild(downloadContainer);


window.jsPDF = window.jspdf.jsPDF;
document.getElementById("downloadBtn").addEventListener("click", () => {
    const doc = new jsPDF();

    // Set font size for the table content and caption
    const fontSize = 20; // Change this value to adjust the font size for the table
    const captionFontSize = 30; // Change this value to adjust the caption font size

    const styles = {
        fontSize: fontSize,
        // Add more styling options as needed
    };

    // Convert table to PDF format with adjusted font size
    doc.autoTable({ html: '#report-table', styles: styles });

    // Add caption to the PDF and center it horizontally
    const captionText = "BEST SELLER TABLE";
    const pageWidth = doc.internal.pageSize.width;
    const textWidth = doc.getStringUnitWidth(captionText) * captionFontSize / doc.internal.scaleFactor;
    const textOffset = (pageWidth - textWidth) / 2;

    doc.setFontSize(captionFontSize); // Set the caption font size
    doc.text(captionText, textOffset, 10); // Centered caption position

    // Save the PDF file
    doc.save('table.pdf');
});

    } else if (document.getElementById("selectOptions").value === "topRevenue") {
        const topRC = topRevenueCode;
        const topRN = topRevenueNames;
        const topRV = topRevenueValues;

            const tableContainer = document.getElementById('table-container');
            const table = document.createElement('table');
            table.id = "report-table"
            table.innerHTML = `
                <caption>Top Revenue Table</caption>
                <tr>
                    <th>Code</th>
                    <th>Product Name</th>
                    <th>Value</th>
                </tr>
            `;

            topRC.forEach((item, index) => {
                const row = table.insertRow();
                row.innerHTML = `
                <td>${topRC[index]}</td>
                    <td>${topRN[index]}</td>
                    <td>${topRV[index]}</td>
                `;
                
                table.appendChild(row);

            });

            // Clear previous table, if any, and append the new table
            tableContainer.innerHTML = '';
            tableContainer.appendChild(table);


            // ... your previous code for displaying the table

        // Create the download button
        const downloadContainer = document.createElement('div');
        downloadContainer.classList.add('download-container');
        downloadContainer.innerHTML = `
            <button id="downloadBtn">Download as PDF</button>
        `;

        // Append the download button after the table
        tableContainer.appendChild(downloadContainer);


    window.jsPDF = window.jspdf.jsPDF;
document.getElementById("downloadBtn").addEventListener("click", () => {
    const doc = new jsPDF();

    // Set font size for the table content and caption
    const fontSize = 20; // Change this value to adjust the font size for the table
    const captionFontSize = 30; // Change this value to adjust the caption font size

    const styles = {
        fontSize: fontSize,
        // Add more styling options as needed
    };

    // Convert table to PDF format with adjusted font size
    doc.autoTable({ html: '#report-table', styles: styles });

    // Add caption to the PDF and center it horizontally
    const captionText = "TOP REVENUE TABLE";
    const pageWidth = doc.internal.pageSize.width;
    const textWidth = doc.getStringUnitWidth(captionText) * captionFontSize / doc.internal.scaleFactor;
    const textOffset = (pageWidth - textWidth) / 2;

    doc.setFontSize(captionFontSize); // Set the caption font size
    doc.text(captionText, textOffset, 10); // Centered caption position

    // Save the PDF file
    doc.save('table.pdf');
});

        } else if (document.getElementById("selectOptions").value === "leastRevenue") {
          //LEAST REVENUE
        let LRC = leastRevenueCode
        let LRN =  leastRevenueNames
        let LRV =  leastRevenueValues


            const tableContainer = document.getElementById('table-container');
            const table = document.createElement('table');
            table.id = "report-table"
            table.innerHTML = `
                <caption>Least Revenue Table</caption>
                <tr>
                    <th>Code</th>
                    <th>Product Name</th>
                    <th>Value</th>
                </tr>
            `;

            LRN.forEach((item, index) => {
                const row = table.insertRow();
                row.innerHTML = `
                <td>${LRC[index]}</td>
                    <td>${LRN[index]}</td>
                    <td>${LRV[index]}</td>
                `;
                
                table.appendChild(row);

            });

            // Clear previous table, if any, and append the new table
            tableContainer.innerHTML = '';
            tableContainer.appendChild(table);


            // ... your previous code for displaying the table

        // Create the download button
        const downloadContainer = document.createElement('div');
        downloadContainer.classList.add('download-container');
        downloadContainer.innerHTML = `
            <button id="downloadBtn">Download as PDF</button>
        `;

        // Append the download button after the table
        tableContainer.appendChild(downloadContainer);
        window.jsPDF = window.jspdf.jsPDF;
document.getElementById("downloadBtn").addEventListener("click", () => {
    const doc = new jsPDF();

    // Set font size for the table content and caption
    const fontSize = 20; // Change this value to adjust the font size for the table
    const captionFontSize = 30; // Change this value to adjust the caption font size

    const styles = {
        fontSize: fontSize,
        // Add more styling options as needed
    };

    // Convert table to PDF format with adjusted font size
    doc.autoTable({ html: '#report-table', styles: styles });

    // Add caption to the PDF and center it horizontally
    const captionText = "LEAST REVENUE TABLE";
    const pageWidth = doc.internal.pageSize.width;
    const textWidth = doc.getStringUnitWidth(captionText) * captionFontSize / doc.internal.scaleFactor;
    const textOffset = (pageWidth - textWidth) / 2;

    doc.setFontSize(captionFontSize); // Set the caption font size
    doc.text(captionText, textOffset, 10); // Centered caption position

    // Save the PDF file
    doc.save('table.pdf');
});

     }
});





        //GRAPHS CODE BELOOW

        // Best Seller Chart

        var canvas = document.getElementById("myChart");

        
        var topSellerString = '<%= topSellerName%>';
        console.log(topSellerString);

        const topSellerArrayName = topSellerString.split(',');
        console.log(topSellerArrayName);

        var topSellerStringValues = '<%= topSellerValue%>';
        console.log(topSellerString);

        const topSellerArrayValue = topSellerStringValues.split(',');
        console.log(topSellerArrayValue);

         // Top Revenue Chart
        var topRevenueName = '<%= revenueProductName%>';
        const topRevenueNameArray = topRevenueName.split(',');
        

        var topRevenueValue = '<%= revenueValue%>';
        const topRevenueValueArray = topRevenueValue.split(',');

         // Least Seller Chart
        var leastSellerValuesString = '<%= leastSelectedValuesSold %>';
        const leastSellerValuesArray = leastSellerValuesString.split(',');

        var leastSellerNameString = '<%= leastSelectedValuesName %>';
        const leastSellerNameArray = leastSellerNameString.split(',');

        // Least Revenue Chart
        var leastRevenueNameString = '<%= leastRevenueProductName %>';
        const leastRevenueNameArray = leastRevenueNameString.split(',');

        var leastRevenueValueString = '<%= leastRevenueValue %>';
        const leastRevenueValueArray = leastRevenueValueString.split(',');
                

        // Variables for the first bar chart
       
        var option = "bestSeller";
        var labels1;
        var data1;
        var LabelOfChart;
        var color;
        var lineColor;


        // Get the canvas element and its context
        var canvas = document.getElementById('myChart');
        var ctx = canvas.getContext('2d');
        var myChart = null;

        document.getElementById("selectOptions").addEventListener("change", () => {

         if (myChart !== null) {
        myChart.destroy(); // Destroy the existing chart if it exists
    }

        if(document.getElementById('selectOptions').value === "bestSeller"){
            
                LabelOfChart = "Bestseller";

                labels1 = topSellerArrayName;
                data1 = topSellerArrayValue;
                color = 'rgba(227, 61, 148, 5.0)';
                lineColor = 'rgba(227, 61, 148, 0.1)';

    
    
        // Create a bar chart with two datasets
        myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels1,
                datasets: [{
                    label: LabelOfChart,
                    data: data1,
                    backgroundColor: color,
                    borderColor: lineColor,
                    borderWidth: 1,
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        canvas.style.display = "block";    

        } else if(document.getElementById('selectOptions').value === "topRevenue"){

                LabelOfChart = "Top Revenue";
                
                labels1 = topRevenueNameArray;
                data1 = topRevenueValueArray;
        
                color = 'rgba(238, 130, 238, 5.0)';
                lineColor = 'rgba(238, 130, 238, 1)';
    

            myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels1,
                datasets: [{
                    label: LabelOfChart,
                    data: data1,
                    backgroundColor: color,
                    borderColor: lineColor,
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        canvas.style.display = "block";
        }else if(document.getElementById('selectOptions').value === "leastSeller"){

            LabelOfChart = "Least Seller";
                
                labels1 = leastSellerNameArray;
                data1 = leastSellerValuesArray;

                color = 'rgba(255, 0, 0, 2.0)';
                lineColor = 'rgba(255, 0, 0, 1)';

            myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels1,
                    datasets: [{
                        label: LabelOfChart,
                        data: data1,
                        backgroundColor: color,
                        borderColor: lineColor,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                }
            }
        });
        canvas.style.display = "block";

        }else if(document.getElementById('selectOptions').value === "leastRevenue"){
            
            LabelOfChart = "Least Revenue";
                
                labels1 = leastRevenueNameArray;
                data1 = leastRevenueValueArray;
                color = 'rgba(255, 165, 0, 5.0)';
                lineColor = 'rgba(255, 165, 0, 1)';

                myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels1,
                    datasets: [{
                        label: LabelOfChart,
                        data: data1,
                        backgroundColor: color,
                        borderColor: lineColor,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                }
            }
            
        });
        canvas.style.display = "block";

        }else if(document.getElementById('selectOptions').value === "lowstock"){
            canvas.style.display = "none";
        }
    })
        /*
        // Variables for the second bar chart
        var labels2 = ['Ballpen', 'Category B', 'Category C', 'Category D', 'Category E'];
        var data2 = [15, 30, 45, 25, 55];*/
    
        // Get the canvas element and its context
       
        if (localStorage.getItem("TOKEN") === null) {
        document.getElementById("body").style.display = "none"
        alert("You don't have permission to access this page.");
   
            window.history.back();
    }


        let accBtn = document.getElementById("accBtn")
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "block"
        } else {
            console.log("Employee")
            accBtn.style.display = "none"
        }
    }

    
    </script>
    
</body>
</html>