<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/chart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/smile.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/copy.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/pen.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <title>Products</title>
    <link rel="stylesheet" href="/Products (Admin).css">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
</head>
<body id="body">

    <header>
        

          
 
    </header>
    

    <div class="flexx">
    <div class="nav">
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

        <div class="we">
        <a class="bb" href="/products">
            <div class="te" id="currentPage">
                <h5 class="test">Products</h5>
            </div>
        </a>

        <a class="bb" href="/inventory">
            <div class="te">
                <h5 class="test">Inventory &nbsp <span class="badge" id="invNavWarning">0</span> </h5>
            </div>
        </a>

        <a class="bb" href="/reports">
            <div class="te">
                <h5 class="test">Reports</h5>
            </div>
        </a>
        
        <a class="bb" href="/supplier">
            <div class="te">
                <h5 class="test">Supplier</h5>
            </div>
        </a>

        <a class="bb" href="/transactions">
            <div class="te">
                <h5 class="test">Transactions</h5>
            </div>
        </a>

        <a class="bb" href="/logs">
            <div class="te">
                <h5 class="test">Logs</h5>
            </div>
        </a>

        <a class="bb" href="/archive">
            <div class="te"">
                <h5 class="test employeeHidden">Archive</h5>
            </div>
        </a>

        <a class="bb" href="/account">
            <div class="te">
                <h5 class="test employeeHidden" id="accBtn">Accounts</h5>
            </div>
        </a>

        <div id="logoutBtn" onclick="logout()" style="cursor: pointer;">
            <h5 class="testLogout" id="accBtn">Logout</h5>
        </div>

    </div>
    </div>
    
    <main>
        <div>
            <i class="fas fa-bell" id="notifIcon" onclick="showAlert()">
                <span class="badge" id="lowStockCount">0</span> 
            </i>
            <div class="lowStockDiv" id="lowStockDiv">
        </div>
        <div class="title-con">

       
            
       <h1 id="title">PRODUCTS</h1>
    </div>

    
        <input type="hidden" name="action" value="saveEditedRow">
        

    

        <div class="table-container">

            <div id = "prodTableContainer">
            <div class="search-date">

              <!--   <form action="/products" method ="get">-->
                <input type="search" id="search" name = "query" placeholder="enter product name or id">
              <!--   <button type = "submit" style="display: none;">Search</button>-->

              <!--  </form>-->
               <!-- <p id="date">-->
                    <!-- Date is dynamically rendered from JS -->
               <!--  </p> -->


            </div>
            
            <table id ="productTable">

                <thead>
                <tr>
                    <th>CODE</th>
                    <th>BRAND</th>
                    <th>NAME</th>
                    <th>WHOLESALE PRICE (₱)</th>
                    <th>RETAIL PRICE (₱)</th>
                    <th>LOW STOCK THRESHOLD</th>
                    <th>STATUS</th>
                    <th>ACTION</th>
                </tr>
            </thead>
              
           
         
                 <% if(products.length > 0) { %>
                    <% products.forEach((product,index) => { %>
                <tr class = "database-row product-row">

                    
                    <input type="hidden" name="action" value="saveEditedRow">
                    <td><input type="text" contenteditable="true" name ="code[]"  value="<%= product.code %>" disabled></td>
                    <td><input type="text" contenteditable="true" name ="brandName[]"  value="<%= product.brandName %>" disabled></td>
                    <td><input type="text" contenteditable="true" name = "productName[]"  value="<%= product.productName %>" disabled></td>
                    <td><input type="number" contenteditable="true" name = "wholesalePrice[]"  value="<%= product.wholesalePrice %>" disabled></td>
                    <td><input type="number" contenteditable="true" name = "retailPrice[]"  value="<%= product.retailPrice %>" disabled></td> 
                    <td><input type="number" contenteditable="true" name = "lowStockThreshold[]"  value="<%= product.lowStockThreshold %>" disabled></td> 
                    <td><input type="text" contenteditable="true" name = "isActive[]"  value="<%= product.isActive %>" disabled></td> 
            
                 <!--   <td><button type ="button" onclick="submitRow(this)" class="saveBtn">Save</button></td> -->
                 <td> <button class="editBtn" id="<%= product.id %>" data-target="#editModal_<%= product._id %>" type="button" onclick="openEditModal('<%= product._id %>')">UPDATE</button>
                 </td>
                   
                   
                    
                 <div id="editModal_<%= product._id %>" class="modal">
                    <div class="modal-content">
                        <span class="close" onclick="closeEditModal('<%= product._id%>')">X</span>
                        <h2>UPDATE PRODUCT</h2>
                        <form id="editForm" method="post" action="products/<%= product._id %>">
                            <label for="brandName">Brand: </label>
                            <select name="brandName" id="editBrandName_<%= product.id %>">
                                <option value="<%= product.brandName %>" selected><%= product.brandName %></option>
                                <% suppliers.forEach(function(brand) { %>
                                    <option value="<%= brand.brandName %>"><%= brand.brandName %></option>
                                <% }); %>
                            </select>

                            <br><br>
                            <label for="code">Code:</label>
                            <input type="text" class="readOnlyBG" id="editCodeID_<%= product.id %>" name="code" value="<%= product.code %>" readonly><br><br>
            
                            <label for="productName">Product Name:</label>
                            <input type="text" id="editProductName_<%= product.id %>" name="productName" value="<%= product.productName%>"><br><br>
            
                            <label for="wholesalePrice">Wholesale Price:</label>
                            <input type="number" id="wholesalePrice_<%= product.id %>" name="wholesalePrice" value="<%= product.wholesalePrice %>"><br><br>
            
                            <label for="retailPrice">Retail Price:</label>
                            <input type="number" id="retailPrice_<%= product.id %>" name="retailPrice" value="<%= product.retailPrice %>"><br><br>
            
                            <label for="lowStockThreshold">Low stock threshold:</label>
                            <input type="number" id="editLowStockThreshold_<%= product.id %>" name="lowStockThreshold"  value="<%= product.lowStockThreshold %>"><br><br>
                           
                            <select name="isActive" id="editIsActive_<%= product.id %>">
                                <option value="<%= product.isActive %>" selected><%= product.isActive %></option>
                                <option value="Inactive">Inactive</option>
                            </select>
                        
                            <br><br>

                            <button id="saveEdit" type="submit">Save</button>
                        </form>
                    </div>
                </div>



                
                    
                </tr>
                
                <% }) %>

                <%} else { %>
                    <p>There are no products yet...</p>
                
                <% } %>   

                
                
                
            </table>

        </div>
            <div class="save-addproduct">
                <!--<button id="editSave" class="editSave" type="submit">SAVE</button> -->
                
            </div>
        <!--  </form> -->
            

        

        <form id = "saveProduct" action="/products" method = "post">

            <input type="hidden" name="action" value="addProduct">

        <table id ="productTable2">

            <tbody>


            </tbody>
        </table>

        

        </form>

     
        <div class="save-addproduct">
           
            <button id="cancelProduct" class="addBtn" style="display: none;">CANCEL</button>
            <button id="saveproductbtn" class="saveBtn" type="submit" style="display: none;">SAVE PRODUCT</button>
            <button class="addBtn" id = "addRowButton">ADD NEW PRODUCT</button>
        </div>

        <div id="myModal" class="modal">
            <!-- Modal content -->
            <div class="modal-content">
              <span id="close">X</span>
              <h2>NEW PRODUCT</h2>
              <!-- Your form content for adding a new product -->
              <form id="productForm">
                <label for="brandName">Brand: </label>
                <select name="brandName" id="brandName" required>
                    <option value="" ></option>
                    <% if (suppliers.length === 0) { %>
                        <option value="" disabled>No brands available</option>
                    <% } else { %>
                        <% suppliers.forEach(function(brand) { %>
                            <option value="<%= brand.brandName %>"><%= brand.brandName %></option>
                        <% }); %>
                    <% } %>
                </select>
                
                <br><br>
                <label for="categoryName">Category: </label>
                <select name="categoryName" id="categoryName" required>
                    <option value="" ></option>
                    <option value="WS">Writing Supply</option>
                    <option value="OS">Office Supply</option>
                    <option value="PS">Paper Supply</option>
                </select>
                <br><br>

                <label for="code">Code:</label>
                <input type="text" id="code" class="readOnlyBG" placeholder="AUTO GENERATED" name="code" readonly required><br><br>

                <label for="productName">Product Name:</label>
                <input type="text" id="productName" name="productName" required><br><br>

                <label for="wholesalePrice">Wholesale Price:</label>
                <input type="number" id="wholesalePrice" name="wholesalePrice" required><br><br>

                <label for="retailPrice">Retail Price:</label>
                <input type="number" id="retailPrice" name="retailPrice" required><br><br>

                <label for="lowStockThreshold">Low stock threshold:</label>
                <input type="number" id="lowStockThreshold" name="lowStockThreshold" required><br><br>
                
                <!-- Add other input fields as needed -->
        
                <button type="submit" id="modalSubmit">Add Product</button>
              </form>
            </div>
          </div>

          <div id="codeCategory" style="display: none;"><%= JSON.stringify(filteredProducts) %></div>
          <div id="codeCategoryOS" style="display: none;"><%= JSON.stringify(filteredProductsOS) %></div>
          <div id="codeCategoryPS" style="display: none;"><%= JSON.stringify(filteredProductsPS) %></div>

       
                <!-- Edit button -->
       
        <!-- Modal for editing -->
       
        <div id="productsDisplay" style="display: none;"><%= JSON.stringify(products) %></div>
            
        </div>

    </main> 

    </div>

    <script src="/Products (Admin).js"></script>

    <script>



const productsData = document.getElementById('productsDisplay').innerHTML;
const decodedProducts = JSON.parse(productsData.replace(/&quot;/g, '"'));
console.log(decodedProducts);

let lowStockCountSpan = document.getElementById('lowStockCount')
let notifDiv = document.getElementById('lowStockDiv')
let notifIcon = document.getElementById('notifIcon')

let lowStockCount = 0;

if (decodedProducts.length > 0) {
    let productDetailsHTML = '';

    for (let i = 0; i < decodedProducts.length; i++) {
        if (decodedProducts[i].currentInv <= decodedProducts[i].lowStockThreshold) {
            lowStockCount++;
            let productDetails = `Product: ${decodedProducts[i].productName}, TH: ${decodedProducts[i].lowStockThreshold}, Inv: ${decodedProducts[i].currentInv} <br>`;
            productDetailsHTML += productDetails;
        }
    }

    notifDiv.innerHTML = productDetailsHTML;

    // Show or hide notifDiv based on the lowStockCount
    if (lowStockCount > 0) {
        notifDiv.style.display = 'none';
    } else {
        notifDiv.style.display = 'none';
        notifIcon.style.display = 'none';
    } 
} else {
    notifDiv.style.display = 'none';
    notifIcon.style.display = 'none';
}


lowStockCountSpan.textContent = lowStockCount
if (lowStockCount == 0) {
    document.getElementById('invNavWarning').style.display = "none"
}
document.getElementById('invNavWarning').textContent = lowStockCount


function showAlert() {
    notifDiv.style.display = "block"
}

  // Select all elements with class 'editBtn'
let editBtns = document.querySelectorAll(".editBtn");


let idLastClicked;
// Loop through each button and attach an event listener
editBtns.forEach(button => {
    button.addEventListener("click", (e) => {
        console.log(e.target.id);
        idLastClicked = e.target.id
    
    });
});


let accBtn = document.getElementById("accBtn")

let user = parseJwt(localStorage.getItem("TOKEN")).email
let productForm = document.getElementById("productForm")

//WS
let codeCategory = document.getElementById('codeCategory').innerHTML
let decodedCodeCategory = JSON.parse(codeCategory.replace(/&quot;/g, '"'));
console.log(decodedCodeCategory);

//OS
let codeCategoryOS = document.getElementById('codeCategoryOS').innerHTML
let decodedCodeCategoryOS = JSON.parse(codeCategoryOS.replace(/&quot;/g, '"'));
console.log(decodedCodeCategoryOS);

//PS
let codeCategoryPS = document.getElementById('codeCategoryPS').innerHTML
let decodedCodeCategoryPS = JSON.parse(codeCategoryPS.replace(/&quot;/g, '"'));
console.log(decodedCodeCategoryPS);



productForm.addEventListener('submit', function () {

  const brandName = document.getElementById('brandName').value;
  let categoryOptions = document.getElementById('categoryName').value
  let code = document.getElementById('code').value;
  const productName = document.getElementById('productName').value;
  const wholesalePrice = document.getElementById('wholesalePrice').value;
  const retailPrice = document.getElementById('retailPrice').value;
  const lowStockThreshold = document.getElementById('lowStockThreshold').value;
  
  const productsData = document.getElementById('productsDisplay').innerHTML;
  const decodedProducts = JSON.parse(productsData.replace(/&quot;/g, '"'));
  const matchingProduct = decodedProducts.some(product => product.productName.toLowerCase() === productName.toLowerCase());
 

let wsLength = decodedCodeCategory.length + 1
let osLength = decodedCodeCategoryOS.length + 1
let psLength = decodedCodeCategoryPS.length + 1

 if (categoryOptions == "WS") {
    code = `WS${wsLength} `
 } else if (categoryOptions == "OS") {
    code = `OS${osLength}`
 } else if (categoryOptions == "PS") {
    code = `PS${psLength}`
 }


 if (!matchingProduct) {
    console.log(matchingProduct);
   // Prepare the data object to send to the server
  const data = {
    action: 'addProduct', // Indicate the action as 'addProduct'
    brandName: brandName,
    code: code,
    productName: productName,
    wholesalePrice: wholesalePrice,
    retailPrice: retailPrice,
    lowStockThreshold: lowStockThreshold,
    category: categoryOptions,
    isActive: "Active"
    // Add other fields as needed for the new product
  };

  // Send the form data to the backend using fetch
  fetch('/products', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  })
    .then(response => {
      if (response.ok) {
        
        // Handle success, e.g., close the modal and perform any UI updates
        const modal = document.getElementById('myModal');
        modal.style.display = 'none';
        // Perform any other necessary actions upon successful addition of a new product
      } else {
        // Handle errors if the request fails
        console.error('Error adding product');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  
    //FOR GO TO LOGS
    fetch('/transactions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
        userLogsOnly: user,
        action: `Added "${productName}" as a new product`,
    })
  })
    .then(response => {
      if (response.ok) {
        // Handle success for the transaction
        // ...
      } else {
        // Handle errors if the request fails
        console.error('Error with the transaction');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    }); 

} else {
    console.log("DUPLICATE, WONT SUBMIT TO DB")
}

  

    
});


   // Get the modal
const modal = document.getElementById('myModal');
const editModal = document.getElementById(`editModal`);

// Get the button that opens the modal
const btn = document.getElementById('addRowButton');

// Get the <span> element that closes the modal
const span = document.getElementById("close")

// When the user clicks the button, open the modal
btn.onclick = function () {
  modal.style.display = 'block';
  editModal.style.display = 'block';
};

// When the user clicks on <span> (x), close the modal
span.onclick = function () {
  modal.style.display = 'none';
  editModal.style.display = 'none';
};

// When the user clicks anywhere outside of the modal, close it
window.onclick = function (event) {
  if (event.target === modal || event.target === editModal ) {
    modal.style.display = 'none';
    editModal.style.display = 'none';
  }
};


function openEditModal(productId) {
  const modal = document.getElementById(`editModal_${productId}`);
  if (modal) {
    modal.style.display = 'block';

    const editForm = document.getElementById('editForm');
    let editCodeID = document.getElementById(`editCodeID_${productId}`);
    let editBrandName = document.getElementById(`editBrandName_${productId}`);
    let editProductName = document.getElementById(`editProductName_${productId}`);
    let editWholesalePrice = document.getElementById(`editWholesalePrice_${productId}`);
    let editRetailPrice = document.getElementById(`editRetailPrice_${productId}`);
    let editLowStockThreshold = document.getElementById(`editLowStockThreshold_${productId}`);
    let editIsActive = document.getElementById(`editIsActive_${productId}`);
    let user = parseJwt(localStorage.getItem("TOKEN")).email
    
// Assuming this code runs after the creation or update of the form
console.log("EDITCODE", editCodeID.value)

editForm.addEventListener("submit", (event) => {

    console.log("EDITCODE", editCodeID.value)
console.log("put sub")
    // Get the updated values from the form fields
    const updatedData = {
        code: editCodeID.value,
        brandName: editBrandName.value,
        productName: editProductName.value,
        wholesalePrice: editWholesalePrice.value,
        retailPrice: editRetailPrice.value,
        lowStockThreshold: editLowStockThreshold.value,
        isActive: editIsActive.value
    };

    fetch(`/products/${productId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedData)
    })
    .then(response => {
        if (response.ok) {
            // Handle success
            return response.json(); // Parse the response body as JSON
        } else {
            throw new Error('Error updating product');
        }
    })
    .then(data => {
        // Here 'data' contains the updated product from the server
        console.log(data.updatedProduct);
        // Perform actions with the updated product data as needed
        const editModal = document.getElementById('editModal');
        // Close the modal, update UI, etc.
        location.reload()
    })
    .catch(error => {
        location.reload()
    });


    

    event.preventDefault();
});
  }}
// Function to close the edit modal
function closeEditModal(productId) {
  const modal = document.getElementById(`editModal_${idLastClicked}`);
  if (modal) {
    modal.style.display = 'none';
  }
}
// Function to save the edited data (you'll need to implement this)
function saveEditedData() {
  // Retrieve the edited data from the form fields
  const editedProductName = document.getElementById('productNameEdit').value;
  // Retrieve other edited data similarly

  // Perform actions to save the edited data (e.g., send it to the server via AJAX)
  // Implement your logic to save the edited data
  // ...

  // Close the edit modal after saving the changes
  closeEditModal();
}




//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}



        
        document.getElementById("saveproductbtn").addEventListener("click", 
            
            function() {
            document.getElementById("saveProduct").submit();
            }
         );
        
      

        
        
        function hideNewRow(){

            var table = document.getElementById("productTable2");

                    // Clear all rows by removing them one by one
                    while (table.rows.length > 0) {
                        table.deleteRow(0);
                    }
           
            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "block";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "none";

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "none"; 
        }

        
        function submitRow(button){
            // Traverse the DOM to find the row
            var row = button.closest('div');
            
            // Find the form in the row (assuming the form is in the same row)
            var form = row.querySelector('form');
            
            // Submit the form
            form.submit();
        }

       function handleStatusChange(input) {
    // Get the row of the changed input
    var row = input.parentNode.parentNode;

    // Get the value of the status input
    var statusValue = input.value;

    // If the status is changed to 0, set other columns (except code and productName) to -1
    if (statusValue === '0') {
        // Get the lowStockThreshold input in the row
        var lowStockThresholdInput = row.querySelector('input[name^="lowStockThreshold"]');
        
        // Set the value of the lowStockThreshold input to -1
        if (lowStockThresholdInput) {
            lowStockThresholdInput.value = '-1';
        }

        // Get all the input elements in the row, excluding lowStockThreshold
        var otherInputs = row.querySelectorAll('input[name^="unitCost"], input[name^="unitPrice"], input[name^="startingInventory"]');
        
        // Set the value of each input to 0
        otherInputs.forEach(function (input) {
            input.value = '0';
        });
    }
}


$(document).ready(function () {
      $('#search').on('input', function () {
         var searchTerm = $(this).val().toLowerCase();

         $('.product-row').each(function () {
            var rowText = $(this).find('input, select').map(function() {
               return $(this).val().toLowerCase();
            }).get().join(' ');

            if (rowText.includes(searchTerm)) {
               $(this).show();
            } else {
               $(this).hide();
            }
         });
      });
   });

function logout() {
    if (localStorage.getItem("TOKEN")) {
        localStorage.removeItem("TOKEN")
        window.location.href = "/"
        alert("Logged out sucessfully, redirecting to homepage")
    } else {
        fullSentence.textContent = "Not logged in"
        showEmail.textContent = " "
    }
}



    if (localStorage.getItem("TOKEN") === null) {
        document.getElementById("body").style.display = "none"
        alert("You don't have permission to access this page.");
            window.history.back();
    }

  


        // Event listener for the "Add Row" button
       /*  document.querySelector("#addRowButton").addEventListener("click", addRow); */
        document.querySelector("#cancelProduct").addEventListener("click", hideNewRow);

    
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    let addRowBtn = document.getElementById("addRowButton")
    let editBtn = document.getElementsByClassName("editBtn")
    let employeeHidden = document.getElementsByClassName("employeeHidden");


    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "flex"
        } else {
            console.log("Should not")
            accBtn.style.display = "none"
            addRowBtn.style.display = "none"
            for (let i = 0; i < editBtn.length; i++) {
            editBtn[i].style.display = "none";
            }

            for (let i = 0; i < employeeHidden.length; i++) {
                employeeHidden[i].style.display = "none";
            }

        }
    }

        </script>
    </body>
</html>
