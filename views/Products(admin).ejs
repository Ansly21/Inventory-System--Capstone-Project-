<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/chart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/smile.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/copy.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/pen.css' rel='stylesheet'>
    <title>Products (Admin)</title>
    <link rel="stylesheet" href="/Products (Admin).css">
</head>
<body id="body">

    <header>
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

            <h1 id="title">PRODUCTS</h1>
 
    </header>

    <main>

        <div class="nav">
            <a href="/products">
                <button  class="page-btn">Products<i class="gg-pen"></i></button>
            </a>

            <a href="/inventory">
                <button>Inventory<i class="gg-copy"></i></button>
            </a>

            <a href="/reports">
                <button>Reports<i class="gg-chart"></i></button>
            </a>

            <a href="/account">
                <button>Accounts<i class="gg-smile"></i></button>
            </a>
        </div>



        <input type="hidden" name="action" value="saveEditedRow">
        


        <div class="table-container">
            <div class="search-date">

                <form action="/products" method ="get">
                <input type="search" id="search" name = "query" placeholder="enter product name or id">
                <button type = "submit" style="display: none;">Search</button>

                </form>
               <!-- <p id="date">-->
                    <!-- Date is dynamically rendered from JS -->
               <!--  </p> -->


            </div>
            
            <table id ="productTable">
                <tr>
                    <th>CODE</th>
                    <th>PRODUCT NAME</th>
                    <th>UNIT COST</th>
                    <th>UNIT PRICE</th>
                    <th>LOW STOCK THRESHOLD</th>
                    <th>STARTING INVENTORY</th>
                    <th>STATUS</th>
                    <th>ACTION</th>
                </tr>

              
         
                 <% if(products.length > 0) { %>
                    <% products.forEach((product,index) => { %>
                <tr class = "database-row">

                    <form id ="editproduct" action="/products" method="post">
                    <input type="hidden" name="action" value="saveEditedRow">

                    <td><input type="text" contenteditable="true" name ="code[]"  value="<%= product.code %>" ></td>
                    <td><input type="text" contenteditable="true" name = "productName[]"  value="<%= product.productName %>"></td>
                    <td><input type="number" contenteditable="true" name = "unitCost[]"  value="<%= product.unitCost %>"></td>
                    <td><input type="number" contenteditable="true" name = "unitPrice[]"  value="<%= product.unitPrice %>"></td> 
                    <td><input type="number" contenteditable="true" name = "lowStockThreshold[]"  value="<%= product.lowStockThreshold %>"></td>
                    <td><input type="number" contenteditable="true" name = "startingInventory[]"  value="<%= product.startingInventory %>"></td>
                    <td><input type="range" contenteditable="true" name = "status[]" min="0" max="1"  value="<%= product.status %>"  onchange="handleStatusChange(this)"></td>
                  
            
                   <td><button type ="button" onclick="submitRow(this)" class="saveBtn">Save</button></td>
                   
                    
                   </form>
                    
                </tr>
                
                <% }) %>

                <%} else { %>
                    <p>There are no products yet...</p>
                
                <% } %>   

                

             
                
            </table>
            <div class="save-addproduct">
                <!--<button id="editSave" class="editSave" type="submit">SAVE</button> -->
                
            </div>
        <!--  </form> -->
            

        

        <form id = "saveProduct" action="/products" method = "post">

            <input type="hidden" name="action" value="addProduct">

        <table id ="productTable2">

            <tbody>


            </tbody>
        </table>

        
        
        
        <div class="save-addproduct">
           <!-- <button id="saveproductbtn" class="saveBtn" type="submit" style="display: none;">SAVE PRODUCT</button>-->
            
        </div>




        </form>

     
        <div class="save-addproduct">
           
            <button id="cancelProduct" class="addBtn" style="display: none;">CANCEL</button>
            <button id="saveproductbtn" class="saveBtn" type="submit" style="display: none;">SAVE PRODUCT</button>
            <button class="addBtn" id = "addRowButton">ADD NEW PRODUCT</button>
        </div>

      
            <!--
            <% if(products.length > 0) { %>
                <% products.forEach(product => { %>

               <p><%= product._id %></p>
               <p><%= product.productName %></p>
                <p><%= product.unitCost %></p>
                <p><%= product.unitPrice %></p>
                <p><%= product.lowStockThreshold %></p>
                <p><%= product.startingInventory %></p>
                <p><%= product.status %></p>

                <% }) %>

                <%} else { %>
                    <p>There are no products yet...</p>
                
                <% } %>    

                -->
            
        </div>

    </main> 

    <script src="/Products (Admin).js"></script>

    <script>

//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}



        
        document.getElementById("saveproductbtn").addEventListener("click", 
            
            function() {
            document.getElementById("saveProduct").submit();
         });
        
        /*
        document.addEventListener("DOMContentLoaded", function () {
            // Get a reference to the table and button
            const table = document.getElementById('productTable2');
            const addRowButton = document.getElementById('addBtn');

            // Function to add a new row to the table
            function addRow() {
                const newRow = table.insertRow();
                const code = newRow.insertCell(0);
                const productName = newRow.insertCell(1);
                const unitCost = newRow.insertCell(2);
                const unitPrice = newRow.insertCell(3);
                const lowStockThreshold = newRow.insertCell(4);
                const startingInventory = newRow.insertCell(5);
                const status = newRow.insertCell(6);

                // You can customize the content of the cells here
                code.innerHTML = "<input type='text' placeholder='Code'>";
                productName.innerHTML = "<input type='text' placeholder='Name'>";
                unitCost.innerHTML = "<input type='text' placeholder='Unit Cost'>";
                unitPrice.innerHTML = "<input type='text' placeholder='Unit Price'>";
                lowStockThreshold.innerHTML = "<input type='text' placeholder='Low Stock Threshold'>";
                startingInventory.innerHTML = "<input type='text' placeholder='Starting Inventory'>";
                status.innerHTML = "<input type='range' min='0' max='1'>";
                console.log("row is now added");
            }

            // Attach the addRow function to the button's click event
            addRowButton.addEventListener("click", addRow);
        });*/

        // Function to add a new row to the table
        function addRow() {

          


            const tableBody = document.querySelector("#productTable2 tbody");
            const newRow = tableBody.insertRow();

            // Add cells (columns) to the new row
                const code = newRow.insertCell(0);
                const productName = newRow.insertCell(1);
                const unitCost = newRow.insertCell(2);
                const unitPrice = newRow.insertCell(3);
                const lowStockThreshold = newRow.insertCell(4);
                const startingInventory = newRow.insertCell(5);
                const status = newRow.insertCell(6);

            // Create input elements for each cell
            const codeInput = document.createElement("input");
            codeInput.type = "text";
            codeInput.name = "code[]"; // Use an array to collect multiple names
            code.appendChild(codeInput);

            const productInput = document.createElement("input");
            productInput.type = "text";
            productInput.name = "productName[]"; // Use an array to collect multiple emails
            productName.appendChild(productInput);

            const costInput = document.createElement("input");
            costInput.type = "number";
            costInput.name = "unitCost[]"; // Use an array to collect multiple emails
            unitCost.appendChild(costInput);

            const priceInput = document.createElement("input");
            priceInput.type = "number";
            priceInput.name = "unitPrice[]"; // Use an array to collect multiple emails
            unitPrice.appendChild(priceInput);

            const lowStockInput = document.createElement("input");
            lowStockInput.type = "number";
            lowStockInput.name = "lowStockThreshold[]"; // Use an array to collect multiple emails
            lowStockThreshold.appendChild(lowStockInput);

            const startInvInput = document.createElement("input");
            startInvInput.type = "number";
            startInvInput.name = "startingInventory[]"; // Use an array to collect multiple emails
            startingInventory.appendChild(startInvInput);

            const statusInput = document.createElement("input");
            statusInput.type = "range";
            statusInput.max = "1";
            statusInput.min = "0";
            statusInput.name = "status[]"; // Use an array to collect multiple emails
            status.appendChild(statusInput);

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "block";

            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "none";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "block";



        }

        


        function hideNewRow(){

            var table = document.getElementById("productTable2");

                    // Clear all rows by removing them one by one
                    while (table.rows.length > 0) {
                        table.deleteRow(0);
                    }
           


            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "block";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "none";

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "none";

            

        }

        

        function submitRow(button){

            // Traverse the DOM to find the row
            var row = button.closest('tr');
            
            // Find the form in the row (assuming the form is in the same row)
            var form = row.querySelector('form');
            
            // Submit the form
            form.submit();


        }

       function handleStatusChange(input) {
    // Get the row of the changed input
    var row = input.parentNode.parentNode;

    // Get the value of the status input
    var statusValue = input.value;

    // If the status is changed to 0, set other columns (except code and productName) to -1
    if (statusValue === '0') {
        // Get the lowStockThreshold input in the row
        var lowStockThresholdInput = row.querySelector('input[name^="lowStockThreshold"]');
        
        // Set the value of the lowStockThreshold input to -1
        if (lowStockThresholdInput) {
            lowStockThresholdInput.value = '-1';
        }

        // Get all the input elements in the row, excluding lowStockThreshold
        var otherInputs = row.querySelectorAll('input[name^="unitCost"], input[name^="unitPrice"], input[name^="startingInventory"]');
        
        // Set the value of each input to 0
        otherInputs.forEach(function (input) {
            input.value = '0';
        });
    }
}

    if (localStorage.getItem("TOKEN") === null) {
        document.getElementById("body").style.display = "none"
        alert("You don't have permission to access this page.");
            window.history.back();
    }





        // Event listener for the "Add Row" button
        document.querySelector("#addRowButton").addEventListener("click", addRow);
        document.querySelector("#cancelProduct").addEventListener("click", hideNewRow);

        let accBtn = document.getElementById("accBtn")
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "block"
        } else {
            console.log("Employee")
            accBtn.style.display = "none"
        }
    }


        </script>
    </body>
</html>
