<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory (Admin)</title>
    <link rel="stylesheet" href="/Inventory (Admin).css">
</head>
<body>

    <header>
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

            <h1 id="title">INVENTORY</h1>
 
    </header>

    <main>

        <div class="nav">
            <a href="/products">
                <button>Products</button>
            </a>

            <a href="/inventory">
                <button class="page-btn">Inventory</button>
            </a>

            <a href="/reports">
                <button>Reports</button>
            </a>

            <a href="account">
                <button id="accBtn">Accounts</button>
            </a>
        </div>

















        
        <div class="table-container" >
            <div class="search-date">
                <!--
                <form action="/inventory" method ="get">
                    <input type="search" name = "query" placeholder="enter product name or id">
                    <button id = "searchProd" type = "submit" style="display: none;">Search</button>
                    </form>-->

                <!--<input type="search" placeholder="enter product name or id">-->
                <!--<p id="date">
                     Date is dynamically rendered from JS 
                </p> -->

              
                     
            </div>



            <!--INVIS TABLE-->
            <!--
            <table id = "inventoryTableClone" style="display: none;">
                <tr>
                    <th class="gray-bg">PRODUCT</th>
                    <th class="gray-bg">STARTING INVENTORY</th>
                    <th>QTY PURCHASED</th>
                    <th>QTY SOLD</th>
                    <th class="gray-bg">CLOSING INVENTORY</th>
                    <th class="gray-bg">INVENTORY VALUE</th>
                    <th class="gray-bg">INVENTORY COST</th>
                </tr>

                <form id ="createDoc" action="/inventory" method="post">

                   

                    <button type ="submit" style="display: block;" id="createDocButton" disabled>update</button>
                        
                    <input type="hidden" name="action" value="createDoc">

                <% if(products.length > 0) { %>
                    <% products.forEach((product,index) => { %>
                <tr class = "database-row">

                    

                    <input type="hidden" name="price" class = "price" value="<%= product.unitPrice %>">
                    <input type="hidden" name="cost" class ="cost" value="<%= product.unitCost %>">


                    <td><input type="text"   name = "productName[]"  value="<%= product.productName %>"></td>
                    <td><input type="number" readonly name = "startingInventory[]"  class = "startingInv" value="<%= product.startingInventory %>"></td>
                    <td><input type="number" style="background-color: #EBDEC6;" placeholder="enter purchased" contenteditable="true" name = "qtyPurchased" class = "qtyPurchased" value="0" ></td>
                    <td><input type="number" style="background-color: #EBDEC6;" placeholder="enter sold" contenteditable="true" name = "qtySold" class = "qtySold" value="0"></td>
                    <td><input type="number" readonly name = "closingInv" class = "closingInv" ></td>
                    <td><input type="number" readonly name = "invValue" class = "invValue" ></td>
                    <td><input type="number" readonly name = "invCost" class = "invCost" ></td>

                    

                  
                    
                   
                    
         
                </tr>
                
                <% }) %>

                <%} else { %>
                    <p>There are no products yet...</p>
                
                <% } %>   

            </form>
               
            </table>
        -->









             <!--VISUAL TABLE-->

            <form action="">


            </form>



            <table id = "inventoryTable" >


                <tr>
                    <th class="gray-bg">PRODUCT</th>
                    <th class="gray-bg">STARTING INVENTORY</th>
                    <th>QTY PURCHASED</th>
                    <th>QTY SOLD</th>
                    <th class="gray-bg">CLOSING INVENTORY</th>
                    <th class="gray-bg">INVENTORY VALUE</th>
                    <th class="gray-bg">INVENTORY COST</th>
                </tr>

                <form id ="saveProduct" action="/inventory" method="post">

                    <input type="date" id="datePicker" name="date" min="2023-01-01" max="" >  

                    <input type="hidden" name="action" value="saveEditedRow">

                <% if(products.length > 0) { %>
                    <% products.forEach((product,index) => { %>
                
                
                        <tr class = "database-row">

                  

                        
                    

                    <input type="hidden" name="price" class = "price" value="<%= product.unitPrice %>">
                    <input type="hidden" name="cost" class ="cost" value="<%= product.unitCost %>">


                    <td><input type="text"   name = "productName[]"  value="<%= product.productName %>"></td>
                    <td><input type="number" readonly name = "startingInventory[]"  class = "startingInv" value="<%= product.startingInventory %>"></td>
                    <td><input type="number" style="background-color: #EBDEC6;" placeholder="enter purchased" contenteditable="true" name = "numOfPurchased" class = "qtyPurchased" value="0" ></td>
                    <td><input type="number" style="background-color: #EBDEC6;" placeholder="enter sold" contenteditable="true" name = "numOfSold" class = "qtySold" value="0"></td>
                    <td><input type="number" readonly name = "closingInventory" class = "closingInv" value="pro"></td>
                    <td><input type="number" readonly name = "inventoryValue" class = "invValue" ></td>
                    <td><input type="number" readonly name = "inventoryCost" class = "invCost" ></td>

                   <!--<td><button type ="button" onclick="submitRow(this)" >Save</button>-->
                    
                  
                    
                  <!-- </form> -->
                </tr>
                
                <% }) %>

                <%} else { %>
                    <p>There are no products yet...</p>
                
                <% } %>   
            </form>

                
            </table>

            <div class="save-addproduct">
              
                <button class="saveBtn" id="saveproductbtn" type="submit" >SAVE</button>
               
            </div>



           
            
        </div>

       

    </main> 

   
    <script src="/Products (Admin).js"></script>

    <script>


//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}

    let accBtn = document.getElementById("accBtn")
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "flex"
        } else {
            console.log("Employee")
            accBtn.style.display = "none"
        }
    }

    
/*
const datePicker = document.getElementById("datePicker");
const submitButton = document.getElementById("createDocButton");

datePicker.addEventListener("input", function() {
    if (datePicker.value) {
        submitButton.removeAttribute("disabled");
    } else {
        submitButton.setAttribute("disabled", "true");
    }
});*/




document.addEventListener("DOMContentLoaded", function() {
  var saveButton = document.getElementById("saveproductbtn");
  var form = document.getElementById("saveProduct");

  saveButton.addEventListener("click", function() {
    form.submit(); // Trigger the form submission when the button is clicked
  });
});

/*
const datePicker = document.getElementById("datePicker");
datePicker.addEventListener("change", handleDateChange);


function handleDateChange() {
  const selectedDate = datePicker.value;
  
  // Make an AJAX request to your Node.js server to fetch the updated startingInventory
  fetch(`/inventoryData?date=${selectedDate}`)
    .then(response => response.json())
    .then(data => {

        
        console.log(data.startingInventory);
     // Assuming the response contains the updated startingInventory value
      const updatedStartingInventory = data.startingInventory;
      
      // Update the startingInventory input field in your table
      const startingInventoryInput = document.querySelector(".startingInv");
      startingInventoryInput.value = updatedStartingInventory;
    })
    .catch(z`=> {
      console.error("Error fetching startingInventory:", error);
    });
}*/

/*
const datePicker = document.getElementById("datePicker");
datePicker.addEventListener("change", handleDateChange);

function handleDateChange() {
  const selectedDate = datePicker.value;

  // Make an AJAX request to your Node.js server to fetch the updated startingInventory
  fetch(`/inventoryData?date=${selectedDate}`)
    .then((response) => response.json())
    .then((data) => {
      console.log(data.startingInventory);

      // Assuming the response contains the updated startingInventory value
      const updatedStartingInventory = data.startingInventory;

      // Update all startingInventory input fields in your table
      const startingInventoryInputs = document.querySelectorAll(".startingInv");
      startingInventoryInputs.forEach((input) => {
        input.value = updatedStartingInventory;
      });
    })
    .catch((error) => {
      console.error("Error fetching startingInventory:", error);
    });
}*/

const datePicker = document.getElementById("datePicker");
datePicker.addEventListener("change", handleDateChange);
/*
function handleDateChange() {
  const selectedDate = datePicker.value;

  // Make an AJAX request to your Node.js server to fetch the updated startingInventory
  fetch(`/inventoryData?date=${selectedDate}`)
    .then((response) => response.json())
    .then((data) => {
      console.log(data.startingInventory);
      console.log(data.docuExists);
        
      // Assuming the response contains the updated startingInventory as an array
      const updatedStartingInventoryArray = data.startingInventory;

      // Update all startingInventory input fields in your table
      const startingInventoryInputs = document.querySelectorAll(".startingInv");

      // Check if updatedStartingInventoryArray is an array
      if (Array.isArray(updatedStartingInventoryArray)) {
        startingInventoryInputs.forEach((input, index) => {
          if (index < updatedStartingInventoryArray.length) {
            input.value = updatedStartingInventoryArray[index];
          } else {
            input.value = ''; // Clear input if no corresponding value in the array
          }
        });
      } else {
        console.error("Starting inventory is not an array");
      }
    })
    .catch((error) => {
      console.error("Error fetching startingInventory:", error);
    });
}*/ 


var products = '<%= products.startingInventory %>';
console.log(products);


/*products.forEach(function(product) {
    console.log(product.startingInventory);
    // You can use product.startingInventory or other attributes as needed
  });*/


function handleDateChange() {
  const selectedDate = datePicker.value;

  // Make an AJAX request to your Node.js server to fetch the updated startingInventory
  fetch(`/inventoryData?date=${selectedDate}`)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {

        console.log(data.startingInventory);
      console.log(data.docuTodayExists);
      console.log(data.docuYesterdayExists);
      console.log(data.productStartingInventory);

     //console.log(inv);

      if(data.docuTodayExists){

        alert("Inventory from this date already exists.");
     
    }else if (!data.docuTodayExists && data.docuYesterdayExists){

        if (Array.isArray(data.startingInventory)) {
        const updatedStartingInventoryArray = data.startingInventory;

        // Update all startingInventory input fields in your table
        const startingInventoryInputs = document.querySelectorAll(".startingInv");

        startingInventoryInputs.forEach((input, index) => {
          if (index < updatedStartingInventoryArray.length) {
            input.value = updatedStartingInventoryArray[index];
          } else {
            input.value = data.productStartingInventory[index]; // Clear input if no corresponding value in the array
          }
        });
      } else {
        console.error("Starting inventory is not an array");
      }
        
    }else if(!data.docuTodayExists && !data.docuYesterdayExists){

        alert("This date doesnt have an existing Starting Inventory");

    }



    })
    .catch((error) => {
      console.error("Error fetching or processing startingInventory data:", error);
    });
}


/*
const submitButton2 = document.getElementById("createDocButton");
const table2 = document.getElementById("inventoryTable");

submitButton2.addEventListener("click", function(event) {

    table2.style.display = "block"; 
    
});


const search = document.getElementById("searchProd");

search.addEventListener("click", function(event) {

table2.style.display = "block"; 

});*/
/*
        document.getElementById("saveproductbtn").addEventListener("click", 
            
                        function() {
                        document.getElementById("saveProduct").submit();
                    });*/




 

/*      
        
    document.addEventListener('DOMContentLoaded', function() {

        document.querySelector('#inventoryTable').addEventListener('input', function (e) {
                // Check if the changed input field has the class you want to target
                if (e.target.classList.contains('qtyPurchased') || e.target.classList.contains('qtySold')) {
                    // Find the parent form element of the changed input
                    const form = e.target.closest('form');

                    const startingInvInput = form.querySelector('.startingInv');
                    const qtyPurchasedInput = form.querySelector('.qtyPurchased');
                    const qtySoldInput = form.querySelector('.qtySold');
                    const priceInput = form.querySelector('.price');
                    const costInput = form.querySelector('.cost');

                    const closingInvInput = form.querySelector('.closingInv');
                    const invValueInput = form.querySelector('.invValue');
                    const invCostInput = form.querySelector('.invCost');



                    console.log(startingInvInput);
                    // Compute the value for the target input based on the source input
                    const purchasedValue = parseInt(qtyPurchasedInput.value);
                    const soldValue = parseInt(qtySoldInput.value);
                    const startingInvValue = parseInt(startingInvInput.value);

                    const computedValue1 = startingInvValue + purchasedValue - soldValue;
                    closingInvInput.value = computedValue1;

                    const closeInvValue = parseInt(closingInvInput.value);
                    const priceValue = parseInt(priceInput.value);
                    const costValue = parseInt(costInput.value);


                    const computedValue2 = closeInvValue * priceValue;
                    const computedValue3 = closeInvValue * costValue;

                    invValueInput.value = computedValue2;
                    invCostInput.value = computedValue3;


                }});




    });

        */









/*
        const startingInv = document.getElementById("startingInv");
        const qtyPurchased = document.getElementById("qtyPurchased");
        const qtySold = document.getElementById("qtySold");
        const price = document.getElementById("price");
        const cost = document.getElementById("cost");

        const closingInv = document.getElementById("closingInv");
        const invValue = document.getElementById("invValue");
        const invCost = document.getElementById("invCost");

                // Add an event listener to the source input
        qtyPurchased.addEventListener("input", updateInv);
        qtySold.addEventListener("input", updateInv);
        
        
        function updateInv() {
        // Compute the value for the target input based on the source input
            const purchasedValue = parseInt(qtyPurchased.value);
            const soldValue = parseInt(qtySold.value);
            const startingInvValue = parseInt(startingInv.value);

            const computedValue1 = startingInvValue + purchasedValue - soldValue;
            closingInv.value = computedValue1;

            const closeInvValue = parseInt(closingInv.value);
            const priceValue = parseInt(price.value);
            const costValue = parseInt(cost.value);


            const computedValue2 = closeInvValue * priceValue;
            const computedValue3 = closeInvValue * costValue;

            invValue.value = computedValue2;
            invCost.value = computedValue3;


          //  const computedValue2 = closingInv.value
            

        // Update the value of the target input
        
       
        } */

       /* 
        document.addEventListener("DOMContentLoaded", function() {
        // Select all elements with class names
            const startingInvInputs = document.querySelectorAll(".startingInv");
            const qtyPurchasedInputs = document.querySelectorAll(".qtyPurchased");
            const qtySoldInputs = document.querySelectorAll(".qtySold");
            const priceInputs = document.querySelectorAll(".price");
            const costInputs = document.querySelectorAll(".cost");

            const closingInvInputs = document.querySelectorAll(".closingInv");
            const invValueInputs = document.querySelectorAll(".invValue");
            const invCostInputs = document.querySelectorAll(".invCost");

            // Loop through all rows (assuming the number of rows matches)
            for (let i = 0; i < startingInvInputs.length; i++) {
            // Add event listeners to the source inputs in each row

            qtySoldInputs[i].addEventListener("input", updateInv);
            qtyPurchasedInputs[i].addEventListener("input", updateInv);
            
            }

            function updateInv(e) {
            // Get the index of the row where the change occurred
           // const rowIndex = Array.from(qtyPurchasedInputs).indexOf(e.target);
           
          // const rowIndex = Array.from(qtyPurchasedInputs).concat(Array.from(qtySoldInputs)).indexOf(e.target);

          //const rowIndex = Array.from(qtySoldInputs).concat(Array.from(qtyPurchasedInputs)).indexOf(e.target);

             // Find the parent row of the input that triggered the event
            // const row = e.target.closest("tr");

            // Get the index of the row where the change occurred
           // const rowIndex = Array.from(row.parentElement.children).indexOf(row);

           const rowIndex = Array.from(qtyPurchasedInputs).indexOf(e.target);

            // Retrieve the elements in the same row based on the index
            const startingInvInput = startingInvInputs[rowIndex];
            const qtyPurchasedInput = qtyPurchasedInputs[rowIndex];
            const qtySoldInput = qtySoldInputs[rowIndex];
            const priceInput = priceInputs[rowIndex];
            const costInput = costInputs[rowIndex];

            const closingInvInput = closingInvInputs[rowIndex];
            const invValueInput = invValueInputs[rowIndex];
            const invCostInput = invCostInputs[rowIndex];
            

            console.log("Starting Inv Input:", startingInvInput);
            console.log("Qty Purchased Input:", qtyPurchasedInput);
            console.log("Qty Sold Input:", qtySoldInput);


              // Parse the input values as numbers
                const startingInvValue = parseFloat(startingInvInput.value) || 0;
                const qtyPurchasedValue = parseFloat(qtyPurchasedInput.value) || 0;
                const qtySoldValue = parseFloat(qtySoldInput.value) || 0;
                const priceValue = parseFloat(priceInput.value) || 0;
                const costValue = parseFloat(costInput.value) || 0;

            // Perform calculations using parsed values

            
            const computedValue1 = startingInvValue + qtyPurchasedValue - qtySoldValue;
            closingInvInput.value = computedValue1;

            const computedValue2 = computedValue1 * priceValue;
            const computedValue3 = computedValue1 * costValue;

            invValueInput.value = computedValue2;
            invCostInput.value = computedValue3;

            
            }
        });
*/
    

function submitRow(button){

// Traverse the DOM to find the row
var row = button.closest('tr');

// Find the form in the row (assuming the form is in the same row)
var form = row.querySelector('form');

// Submit the form
form.submit();


}
/*

document.addEventListener("DOMContentLoaded", function() {
    // Select all elements with class names
    const startingInvInputs = document.querySelectorAll(".startingInv");
    const qtyPurchasedInputs = document.querySelectorAll(".qtyPurchased");
    const qtySoldInputs = document.querySelectorAll(".qtySold");
    const priceInputs = document.querySelectorAll(".price");
    const costInputs = document.querySelectorAll(".cost");

    const closingInvInputs = document.querySelectorAll(".closingInv");
    const invValueInputs = document.querySelectorAll(".invValue");
    const invCostInputs = document.querySelectorAll(".invCost");

    //pre-computations 0 values
       


    // Function to update inventory values
    function updateInvForRow(rowIndex) {
        // Retrieve the elements in the same row based on the index
        const startingInvInput = startingInvInputs[rowIndex];
        const qtyPurchasedInput = qtyPurchasedInputs[rowIndex];
        const qtySoldInput = qtySoldInputs[rowIndex];
        const priceInput = priceInputs[rowIndex];
        const costInput = costInputs[rowIndex];

        const closingInvInput = closingInvInputs[rowIndex];
        const invValueInput = invValueInputs[rowIndex];
        const invCostInput = invCostInputs[rowIndex];

        // Parse the input values as numbers
        const startingInvValue = parseFloat(startingInvInput.value) || 0;
        const qtyPurchasedValue = parseFloat(qtyPurchasedInput.value) || 0;
        const qtySoldValue = parseFloat(qtySoldInput.value) || 0;
        const priceValue = parseFloat(priceInput.value) || 0;
        const costValue = parseFloat(costInput.value) || 0;

        // Perform calculations using parsed values
        const computedValue1 = startingInvValue + qtyPurchasedValue - qtySoldValue;
        closingInvInput.value = computedValue1;

        const computedValue2 = computedValue1 * priceValue;
        const computedValue3 = computedValue1 * costValue;

        invValueInput.value = computedValue2;
        invCostInput.value = computedValue3;
    }

    //gumagana to, pero after choosing the date twice lang

    //gumagana to, pero after choosing the date twice lang, pinagkaiba lang walang nakadisplay sa simula hahaha

    for (let i = 0; i < startingInvInputs.length; i++) {
        // Add event listeners to both qtyPurchased and qtySold inputs in each row
        qtyPurchasedInputs[i].addEventListener("input", () => {
            setTimeout(() => updateInvForRow(i), 0); // Add a small delay
        });
        qtySoldInputs[i].addEventListener("input", () => {
            setTimeout(() => updateInvForRow(i), 0); // Add a small delay
        });
    }

    // Add an event listener to the datePicker
    const datePicker = document.getElementById("datePicker");
    datePicker.addEventListener("change", () => {
        // Call the updateInvForRow function for all rows
        for (let i = 0; i < startingInvInputs.length; i++) {
            setTimeout(() => updateInvForRow(i), 0); // Add a small delay
        }
    });

     
});*/

document.addEventListener("DOMContentLoaded", function() {
    // Select all elements with class names
    const startingInvInputs = document.querySelectorAll(".startingInv");
    const qtyPurchasedInputs = document.querySelectorAll(".qtyPurchased");
    const qtySoldInputs = document.querySelectorAll(".qtySold");
    const priceInputs = document.querySelectorAll(".price");
    const costInputs = document.querySelectorAll(".cost");

    const closingInvInputs = document.querySelectorAll(".closingInv");
    const invValueInputs = document.querySelectorAll(".invValue");
    const invCostInputs = document.querySelectorAll(".invCost");

    // Function to update inventory values
    function updateInvForRow(rowIndex) {
        // Retrieve the elements in the same row based on the index
        const startingInvInput = startingInvInputs[rowIndex];
        const qtyPurchasedInput = qtyPurchasedInputs[rowIndex];
        const qtySoldInput = qtySoldInputs[rowIndex];
        const priceInput = priceInputs[rowIndex];
        const costInput = costInputs[rowIndex];

        const closingInvInput = closingInvInputs[rowIndex];
        const invValueInput = invValueInputs[rowIndex];
        const invCostInput = invCostInputs[rowIndex];

        // Parse the input values as numbers
        const startingInvValue = parseFloat(startingInvInput.value) || 0;
        const qtyPurchasedValue = parseFloat(qtyPurchasedInput.value) || 0;
        const qtySoldValue = parseFloat(qtySoldInput.value) || 0;
        const priceValue = parseFloat(priceInput.value) || 0;
        const costValue = parseFloat(costInput.value) || 0;

        // Perform calculations using parsed values
        const computedValue1 = startingInvValue + qtyPurchasedValue - qtySoldValue;
        closingInvInput.value = computedValue1;

        const computedValue2 = computedValue1 * priceValue;
        const computedValue3 = computedValue1 * costValue;

        invValueInput.value = computedValue2;
        invCostInput.value = computedValue3;
    }

    // Add event listeners to all inputs and the datePicker
    const allInputs = document.querySelectorAll(".startingInv, .qtyPurchased, .qtySold, .price, .cost");
    const datePicker = document.getElementById("datePicker");

    allInputs.forEach(input => {
        input.addEventListener("input", () => {
            // Call the updateInvForRow function for all rows
            for (let i = 0; i < startingInvInputs.length; i++) {
                updateInvForRow(i);
            }
        });
    });

    datePicker.addEventListener("change", () => {
        // Call the updateInvForRow function for all rows
        for (let i = 0; i < startingInvInputs.length; i++) {
            updateInvForRow(i);
        }
    });
});

        



 
/*

function submitAllRows() {
    // Select the form and table
    const form = document.getElementById("createDoc"); // Change this to match your form's ID
    const table = document.getElementById("inventoryTable");

    // Collect data from each row
    const rows = table.querySelectorAll("tr.database-row");
    const formData = new FormData();

    rows.forEach((row, index) => {
        const productName = row.querySelector("input[name='productName[]']").value;
        const startingInventory = row.querySelector("input[name='startingInventory[]']").value;
        const qtyPurchased = row.querySelector("input[name='qtyPurchased']").value;
        const qtySold = row.querySelector("input[name='qtySold']").value;
        const closingInv = row.querySelector("input[name='closingInv']").value;
        const invValue = row.querySelector("input[name='invValue']").value;
        const invCost = row.querySelector("input[name='invCost']").value;

        // Append row data to the FormData object
        formData.append(`products[${index}].productName`, productName);
        formData.append(`products[${index}].startingInventory`, startingInventory);
        formData.append(`products[${index}].qtyPurchased`, qtyPurchased);
        formData.append(`products[${index}].qtySold`, qtySold);
        formData.append(`products[${index}].closingInv`, closingInv);
        formData.append(`products[${index}].invValue`, invValue);
        formData.append(`products[${index}].invCost`, invCost);
    });

    // Use the FormData object to send data to the server
    fetch(form.action, {
        method: "POST",
        body: formData,
    })
}

// Attach the submitAllRows function to the button's click event
const saveButton = document.getElementById("saveProductButton");
saveButton.addEventListener("click", submitAllRows);
*/
    </script>
</body>
</html>