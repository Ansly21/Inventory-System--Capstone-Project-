<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/chart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/smile.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/copy.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/pen.css' rel='stylesheet'>
    <title>Inventory</title>
    <link rel="stylesheet" href="/Inventory (Admin).css">
</head>
<body id="body">



    <div class="flexx">
    <div class="nav">
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

        <div class="we">
        <a class="bb" href="/products">
            <div class="te">
                <h5 class="test">Products</h5>
            </div>
        </a>

        <a class="bb" href="/inventory">
            <div class="te">
                <h5 class="test">Inventory</h5>
            </div>
        </a>

        <a class="bb" href="/reports">
            <div class="te">
                <h5 class="test">Reports</h5>
            </div>
        </a>
        
        <a class="bb" href="/supplier">
            <div class="te">
                <h5 class="test">Supplier</h5>
            </div>
        </a>
        
        <a class="bb" href="/transactions">
            <div class="te">
                <h5 class="test" id="accBtn">Transactions</h5>
            </div>
        </a>

        <a class="bb" href="/account">
            <div class="te">
                <h5 class="test" id="accBtn">Accounts</h5>
            </div>
        </a>
    </div>
    </div>
    
    <main>
        <div class="title-con">
       <h1 id="title">INVENTORY</h1>
    </div>
        <input type="hidden" name="action" value="saveEditedRow">
        

        

        <div class="table-container">

            <div id = "prodTableContainer">
            <div class="search-date">

                <form action="/products" method ="get">
                <input type="search" id="search" name = "query" placeholder="enter product name or id">
                <button type = "submit" style="display: none;">Search</button>

                </form>
               <!-- <p id="date">-->
                    <!-- Date is dynamically rendered from JS -->
               <!--  </p> -->


            </div>
            
            <table id ="productTable">

                <thead>
                <tr>
                    <th>CODE</th>
                    <th>BRAND</th>
                    <th>NAME</th>
                    <th>CURRENT INVENTORY </th>
                    <th>WHOLESALE PRICE (₱)</th>
                    <th>RETAIL PRICE (₱)</th>
                    <th>TOTAL RETAIL</th>
                    <th>ACTION</th>
                </tr>
            </thead>
              
           
            <% if(products.length > 0) { %>
                <% products.forEach((product,index) => { %>
            <tr class = "database-row">

                
                
                <td><input type="text" contenteditable="true" name ="code[]"  value="<%= product.code %>" disabled></td>
                <td><input type="text" contenteditable="true" name ="brandName[]"  value="<%= product.brandName %>" disabled></td>
                <td><input type="text" contenteditable="true" name = "productName[]"  value="<%= product.productName %>" disabled></td>
                <td><input type="text" contenteditable="true" name = "currentInv[]" value="<%= product.currentInv %>" disabled></td>
                <td><input type="number" contenteditable="true" name = "wholesalePrice[]"  value="<%= product.wholesalePrice %>" disabled></td>
                <td><input type="number" contenteditable="true" name = "retailPrice[]" value="<%= product.retailPrice %>" disabled></td> 
                <td><input type="number" contenteditable="true" name = "totalRetailPrice[]" id="prevTotalRetail_<%= product.id %>" value="<%= product.prevTotalRetail %>" disabled></td> 
              
        
         
             <td>
              <button class="stockInBtn" id="<%= product.id %>" data-target="#stockInModal_<%= product._id %>" type="button" onclick="openstockInModal('<%= product._id %>')">Stock In</button>
              <button class="stockOutBtn" id="<%= product.id %>" data-target="#stockOutModal_<%= product._id %>" type="button" onclick="openstockOutModal('<%= product._id %>')">Stock Out</button>
             </td>
         
             
            <!-- STOCK IN MODAL -->
             <div id="stockInModal_<%= product._id %>" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closestockInModal('<%= product._id%>')">X</span>
                    <h2>Stock In</h2>
                    <form id="stockInForm_<%= product.id %>" method="post" action="stockInInventory/<%= product._id %>">
                        <label for="stockInBrandName">Brand: </label>
                        <input type="text" id="stockInBrandName_<%= product.id %>" name="stockInBrandName" value="<%= product.brandName %>" readonly><br><br>

                        <label for="stockInCode">Code:</label>
                        <input type="text" id="stockInCode_<%= product.id %>" name="stockInCode" value="<%= product.code %>" readonly><br><br>
        
                        <label for="stockInProductName">Product Name:</label>
                        <input type="text" id="stockInProductName_<%= product.id %>" name="stockInProductName" value="<%= product.productName%>" readonly><br><br>
        
                        <label for="stockInLowStockThreshold">Low stock threshold:</label>
                        <input type="number" id="stockInLowStockThreshold_<%= product.id %>" name="stockInLowStockThreshold"  value="<%= product.lowStockThreshold %>" readonly><br><br>
        
                        <label for="stockInCurrentInv">Current Inventory:</label>
                        <input type="number" id="stockInCurrentInv_<%= product.id %>" name="stockInCurrentInv" value="<%= product.currentInv %>" readonly><br><br>

                        <label for="stockInWholeSalePrice">Wholesale Price:</label>
                        <input type="number" id="stockInWholeSalePrice_<%= product.id %>" name="stockInWholeSalePrice" value="<%= product.wholesalePrice %>"><br><br>
                     
                        <label for="qtyStockIn">QTY:</label>
                        <input type="number" id="qtyStockIn_<%= product.id %>" name="qtyStockIn" min="1"><br><br>

                        <button type="submit">STOCK IN</button>
                    </form>
                </div>
            </div>


            <!-- STOCK OUT MODAL -->
            <div id="stockOutModal_<%= product._id %>" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closestockOutModal('<%= product._id%>')">X</span>
                    <h2>Stock OUT</h2>
                    <form id="stockOutForm_<%= product.id %>" method="post" action="stockOutInventory/<%= product._id %>">
                        <label for="stockOutBrandName">Brand: </label>
                        <input type="text" id="stockOutBrandName_<%= product.id %>" name="stockOutBrandName" value="<%= product.brandName %>" readonly><br><br>

                        <label for="stockOutCode">Code:</label>
                        <input type="text" id="stockOutCode_<%= product.id %>" name="stockOutCode" value="<%= product.code %>" readonly><br><br>
        
                        <label for="stockOutProductName">Product Name:</label>
                        <input type="text" id="stockOutProductName_<%= product.id %>" name="stockOutProductName" value="<%= product.productName%>" readonly><br><br>
        
                        <label for="stockOutLowStockThreshold">Low stock threshold:</label>
                        <input type="number" id="stockOutLowStockThreshold_<%= product.id %>" name="stockOutLowStockThreshold"  value="<%= product.lowStockThreshold %>" readonly><br><br>
        
                        <label for="stockOutCurrentInv">Current Inventory:</label>
                        <input type="number" id="stockOutCurrentInv_<%= product.id %>" name="stockOutCurrentInv" value="<%= product.currentInv %>" readonly><br><br>

                        <label for="stockOutWholeSalePrice">Wholesale Price:</label>
                        <input type="number" id="stockOutWholeSalePrice_<%= product.id %>" name="stockOutWholeSalePrice" value="<%= product.wholesalePrice %>"><br><br>

                        <label for="stockOuRetailPrice">Retail Price:</label>
                        <input type="number" id="stockOutRetailPrice_<%= product.id %>" name="stockOuRetailPrice" value="<%= product.retailPrice %>"><br><br>
                     
                        <label for="qtyStockOut">QTY:</label>
                        <input type="number" id="qtyStockOut_<%= product.id %>" name="qtyStockOut" min="0"><br><br>

                        <button type="submit">STOCK OUT</button>
                    </form>
                </div>
            </div>


             <% }) %>

                <%} else { %>
                    <p>There is no inventory yet...</p>
                
                <% } %>   

             
                
            </table>

        </div>
            <div class="save-addproduct">
                <!--<button id="editSave" class="editSave" type="submit">SAVE</button> -->
                
            </div>
        <!--  </form> -->
            

        

        <form id = "saveProduct" action="/products" method = "post">

            <input type="hidden" name="action" value="addProduct">

        <table id ="productTable2">

            <tbody>


            </tbody>
        </table>

        

        </form>

     
       
      
    

       

            
        </div>

    </main> 

    </div>



    <script>

  // Select all elements with class 'editBtn'
let stockInBtns = document.querySelectorAll(".stockInBtn");


let idLastClicked;
// Loop through each button and attach an event listener
stockInBtns.forEach(button => {
    button.addEventListener("click", (e) => {
        console.log(e.target.id);
        idLastClicked = e.target.id
    
    });
});



   // Get the modal
const modal = document.getElementById('myModal');
const stockInModal = document.getElementById(`stockInModal`);

// Get the button that opens the modal
const btn = document.getElementById('addRowButton');

// Get the <span> element that closes the modal
const span = document.getElementById("close")

// When the user clicks the button, open the modal
btn.onclick = function () {
  modal.style.display = 'block';
  stockInModal.style.display = 'block';
};

// When the user clicks on <span> (x), close the modal
span.onclick = function () {
  modal.style.display = 'none';
  stockInModal.style.display = 'none';
};

// When the user clicks anywhere outside of the modal, close it
window.onclick = function (event) {
  if (event.target === modal || event.target === stockInModal ) {
    modal.style.display = 'none';
    stockInModal.style.display = 'none';
  }
};

//STOCK IN FUNCTION
function openstockInModal(productId) {
  const modal = document.getElementById(`stockInModal_${productId}`);
  if (modal) {
    modal.style.display = 'block';

    const stockInForm = document.getElementById(`stockInForm_${productId}`);
    let stockInCode = document.getElementById(`stockInCode_${productId}`);
    let stockInBrandName = document.getElementById(`stockInBrandName_${productId}`);
    let stockInProductName = document.getElementById(`stockInProductName_${productId}`);
    let stockInWholeSalePrice = document.getElementById(`stockInWholeSalePrice_${productId}`);
    let editRetailPrice = document.getElementById(`editRetailPrice_${productId}`);
    let stockInLowStockThreshold = document.getElementById(`stockInLowStockThreshold_${productId}`);

    
// Assuming this code runs after the creation or update of the form
console.log("EDITCODE", stockInCode.value)

stockInForm.addEventListener("submit", (event) => {
    let stockInCurrentInvValue = parseFloat(document.getElementById(`stockInCurrentInv_${productId}`).value);
    let qtyStockIn = parseFloat(document.getElementById(`qtyStockIn_${productId}`).value);
   
    let currentInv = stockInCurrentInvValue + qtyStockIn;
    console.log("EDITCODE", stockInCode.value)

    // Get the updated values from the form fields
    const updatedData = {
        code: stockInCode.value,
        brandName: stockInBrandName.value,
        productName: stockInProductName.value,
        lowStockThreshold: stockInLowStockThreshold.value,
        currentInv: currentInv,
        prevQtyStockIn: qtyStockIn
    };

    fetch(`/stockInInventory/${productId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedData)
    })
    .then(response => {
        if (response.ok) {
            // Handle success
            return response.json(); // Parse the response body as JSON
        } else {
            throw new Error('Error stocking in inventory');
        }
    })
    .then(data => {
        // Here 'data' contains the updated product from the server
        console.log(data.updatedProduct);
        // Perform actions with the updated product data as needed
        const stockInModal = document.getElementById('stockInModal');
        // Close the modal, update UI, etc.
        location.reload()
    })
    .catch(error => {
        location.reload()
    });

    event.preventDefault();
});
  }
}



//STOCK OUT FUNCTION
function openstockOutModal(productId) {
  const modal = document.getElementById(`stockOutModal_${productId}`);
  if (modal) {
    modal.style.display = 'block';

    const stockOutForm = document.getElementById(`stockOutForm_${productId}`);
    let stockOutCode = document.getElementById(`stockOutCode_${productId}`);
    let stockOutBrandName = document.getElementById(`stockOutBrandName_${productId}`);
    let stockOutProductName = document.getElementById(`stockOutProductName_${productId}`);
    let stockOutWholeSalePrice = document.getElementById(`stockOutWholeSalePrice_${productId}`);
    
    let stockOutLowStockThreshold = document.getElementById(`stockOutLowStockThreshold_${productId}`);
    let prevTotalRetail = parseFloat(document.getElementById(`prevTotalRetail_${productId}`).value);

    
// Assuming this code runs after the creation or update of the form
console.log("EDITCODE", stockOutCode.value)

stockOutForm.addEventListener("submit", (event) => {

    let stockOutCurrentInvValue = parseFloat(document.getElementById(`stockOutCurrentInv_${productId}`).value);
    let qtyStockOut = parseFloat(document.getElementById(`qtyStockOut_${productId}`).value);
    let retailPriceValue =  parseFloat(document.getElementById(`stockOutRetailPrice_${productId}`).value);
  
    let currentInv = stockOutCurrentInvValue - qtyStockOut;
    console.log("EDITCODE", stockOutCode.value)

    let totalRetail = prevTotalRetail + (retailPriceValue * qtyStockOut)

   


    // Get the updated values from the form fields
    const updatedData = {
        code: stockOutCode.value,
        brandName: stockOutBrandName.value,
        productName: stockOutProductName.value,
        lowStockThreshold: stockOutLowStockThreshold.value,
        currentInv: currentInv,
        totalRetail: totalRetail,
        prevTotalRetail: totalRetail,
        prevQtyStockIn: qtyStockOut
    };

    fetch(`/stockOutInventory/${productId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedData)
    })
    .then(response => {
        if (response.ok) {
            // Handle success
            return response.json(); // Parse the response body as JSON
        } else {
            throw new Error('Error stocking in inventory');
        }
    })
    .then(data => {
        // Here 'data' contains the updated product from the server
        console.log(data.updatedProduct);
        // Perform actions with the updated product data as needed
        const stockInModal = document.getElementById('stockInModal');
        // Close the modal, update UI, etc.
        location.reload()
    })
    .catch(error => {
        location.reload()
    });

    event.preventDefault();
});
  }
}

// Function to close the edit modal
function closestockInModal(productId) {
  const modal = document.getElementById(`stockInModal_${productId}`);
  if (modal) {
    modal.style.display = 'none';
  }
}

// Function to close the edit modal
function closestockOutModal(productId) {
  const modal = document.getElementById(`stockOutModal_${productId}`);
  if (modal) {
    modal.style.display = 'none';
  }
}



//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}


        
        function hideNewRow(){

            var table = document.getElementById("productTable2");

                    // Clear all rows by removing them one by one
                    while (table.rows.length > 0) {
                        table.deleteRow(0);
                    }
           
            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "block";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "none";

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "none"; 
        }

        
        function submitRow(button){
            // Traverse the DOM to find the row
            var row = button.closest('div');
            
            // Find the form in the row (assuming the form is in the same row)
            var form = row.querySelector('form');
            
            // Submit the form
            form.submit();
        }

       function handleStatusChange(input) {
    // Get the row of the changed input
    var row = input.parentNode.parentNode;

    // Get the value of the status input
    var statusValue = input.value;

    // If the status is changed to 0, set other columns (except code and productName) to -1
    if (statusValue === '0') {
        // Get the lowStockThreshold input in the row
        var lowStockThresholdInput = row.querySelector('input[name^="lowStockThreshold"]');
        
        // Set the value of the lowStockThreshold input to -1
        if (lowStockThresholdInput) {
            lowStockThresholdInput.value = '-1';
        }

        // Get all the input elements in the row, excluding lowStockThreshold
        var otherInputs = row.querySelectorAll('input[name^="unitCost"], input[name^="unitPrice"], input[name^="startingInventory"]');
        
        // Set the value of each input to 0
        otherInputs.forEach(function (input) {
            input.value = '0';
        });
    }
}

let accBtn = document.getElementById("accBtn")

    if (localStorage.getItem("TOKEN") === null) {
        document.getElementById("body").style.display = "none"
        alert("You don't have permission to access this page.");
            window.history.back();
    }

  


        // Event listener for the "Add Row" button
       /*  document.querySelector("#addRowButton").addEventListener("click", addRow); */
        document.querySelector("#cancelProduct").addEventListener("click", hideNewRow);

    
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "flex"
        } else {
            console.log("Should not")
            accBtn.style.display = "none"
        }
    }

        </script>
    </body>
</html>
