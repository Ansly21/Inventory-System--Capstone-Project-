<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/chart.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/smile.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/copy.css' rel='stylesheet'>
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/pen.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <title>Archive</title>
    <link rel="stylesheet" href="/Archives.css">
</head>
<body id="body">

    <header>
        

          
 
    </header>

    <div class="flexx">
    <div class="nav">
        <div class="image">
            <a href="/">
                <img src="/Six7TwoLogo.png" alt="">
            </a>
        </div>

        <div class="we">
        <a class="bb" href="/products">
            <div class="te">
                <h5 class="test">Products</h5>
            </div>
        </a>

        <a class="bb" href="/inventory">
            <div class="te">
                <h5 class="test">Inventory &nbsp <span class="badge" id="invNavWarning">0</span> </h5>
            </div>
        </a>

        <a class="bb" href="/reports">
            <div class="te">
                <h5 class="test">Reports</h5>
            </div>
        </a>

        <a class="bb" href="/supplier">
            <div class="te">
                <h5 class="test">Supplier</h5>
            </div>
        </a>

        <a class="bb" href="/transactions">
            <div class="te">
                <h5 class="test" id="accBtn">Transactions</h5>
            </div>
        </a>

        <a class="bb" href="/logs">
            <div class="te">
                <h5 class="test">Logs</h5>
            </div>
        </a>

        <a class="bb" href="/archive">
            <div class="te"  id="currentPage">
                <h5 class="test" id="accBtn">Archive</h5>
            </div>
        </a>

        <a class="bb" href="/account">
            <div class="te">
                <h5 class="test" id="accBtn">Accounts</h5>
            </div>
        </a>
    </div>
    </div>
    
    <main>
        <div>
            <i class="fas fa-bell" id="notifIcon" onclick="showAlert()">
                <span class="badge" id="lowStockCount">0</span> 
            </i>
            <div class="lowStockDiv" id="lowStockDiv">
        </div>

    </div>
        

        <div class="title-con">
       <h1 id="title">ARCHIVE</h1>
    </div>
        <input type="hidden" name="action" value="saveEditedRow">
        

        

        <div class="table-container">

            <div id = "prodTableContainer">
        

                
            
            <table id ="productTable">
    <caption>Archived Accounts</caption>
                <thead>
                <tr>
                    <th>EMAIL ACCOUNT</th>
                    <th>TYPE</th>
                    <th>ACTION</th>
                </tr>
            </thead>
              
            <% users.forEach(user => { %>
                <tr>
                    <td><%= user.email %></td>
                    <td><%= user.type %></td>
                    <td><button class="restoreBtn" id="<%= user._id %>" onclick="restoreUser(event)" type="button">Restore account</button></td>
                </tr>
            <% }); %>
                            

                
            </table>


            <table id ="productTable2">
                <caption>Archived Products</caption>
                <thead>
                <tr>
                    <th>CODE</th>
                    <th>PRODUCT NAME</th>
                    <th>ACTION</th>
                </tr>
            </thead>
              
            <% inactiveProducts.forEach(product => { %>
                <tr>
                    <td><%= product.code %></td>
                    <td><%= product.productName %></td>
                    <td><button class="restoreBtn" id="<%= product._id %>" onclick="restoreProduct(event)" type="button">Restore product</button></td>
                </tr>
            <% }); %>
                            

                
            </table>

        </div>
           
        

     

        <div id="productsDisplay" style="display: none;"><%= JSON.stringify(products) %></div>

      
   
        </div>

    </main> 

    </div>


    <script>
const productsData = document.getElementById('productsDisplay').innerHTML;
const decodedProducts = JSON.parse(productsData.replace(/&quot;/g, '"'));
console.log(decodedProducts);

let lowStockCountSpan = document.getElementById('lowStockCount')
let notifDiv = document.getElementById('lowStockDiv')
let notifIcon = document.getElementById('notifIcon')

let lowStockCount = 0;

if (decodedProducts.length > 0) {
    let productDetailsHTML = '';

    for (let i = 0; i < decodedProducts.length; i++) {
        if (decodedProducts[i].currentInv <= decodedProducts[i].lowStockThreshold) {
            lowStockCount++;
            let productDetails = `Product: ${decodedProducts[i].productName}, TH: ${decodedProducts[i].lowStockThreshold}, Inv: ${decodedProducts[i].currentInv} <br>`;
            productDetailsHTML += productDetails;
        }
    }

    notifDiv.innerHTML = productDetailsHTML;

    // Show or hide notifDiv based on the lowStockCount
    if (lowStockCount > 0) {
        notifDiv.style.display = 'none';
    } else {
        notifDiv.style.display = 'none';
        notifIcon.style.display = 'none';
    }
} else {
    notifDiv.style.display = 'none';
    notifIcon.style.display = 'none';
}


lowStockCountSpan.textContent = lowStockCount
if (lowStockCount == 0) {
    document.getElementById('invNavWarning').style.display = "none"
}
document.getElementById('invNavWarning').textContent = lowStockCount


function showAlert() {
    notifDiv.style.display = "block"
}

  // Select all elements with class 'editBtn'
let editBtns = document.querySelectorAll(".editBtn");


let idLastClicked;
// Loop through each button and attach an event listener
btn.forEach(button => {
    button.addEventListener("click", (e) => {
        console.log(e.target.id);
        idLastClicked = e.target.id
        console.log(idLastClicked)
    });
});



async function restoreUser(event) {
        const userId = event.target.id;
        const confirmed = confirm('Are you sure you want to restore this account?');
    

        const result = await fetch(`/account/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    isActive: true
                })
            }).then((res) => res.json())
            if(result.status === 'ok') {
                alert('Account restored successfully')
                location.reload() // Add this line to refresh the page
            }else {
                alert(result.error)
            }
  }



async function restoreProduct(event) {
    const productId = event.target.id; // Or use the appropriate attribute that stores the product ID
    const confirmed = confirm('Are you sure you want to restore this product?');

    if (confirmed) {
        const result = await fetch(`/products/${productId}/restore`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                isActive: "Active"
            })
        }).then((res) => res.json());

        if (result.status === 'ok') {
            alert('Product restored successfully');
            location.reload();
        } else {
            alert(result.error);
        }
    } else {
        // Handle cancellation of the confirmation dialog here
        console.log('Restoration cancelled');
    }
}







//FOR DECODING JWT TOKEN AFTER LOGGING IN
function parseJwt (token) { 
        var base64Url = token.split('.')[1];
        var base64 = decodeURIComponent(atob(base64Url).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(base64);
}



        
        document.getElementById("saveproductbtn").addEventListener("click", 
            
            function() {
            document.getElementById("saveProduct").submit();
            }
         );
        
      
        
        function hideNewRow(){

            var table = document.getElementById("productTable2");

                    // Clear all rows by removing them one by one
                    while (table.rows.length > 0) {
                        table.deleteRow(0);
                    }
           
            const editSavebtn = document.getElementById("editSave");
            editSavebtn.style.display = "block";

            const cancelProduct= document.getElementById("cancelProduct");
            cancelProduct.style.display = "none";

            const saveproductbtn = document.getElementById("saveproductbtn");
            saveproductbtn.style.display = "none"; 
        }

        
        function submitRow(button){
            // Traverse the DOM to find the row
            var row = button.closest('div');
            
            // Find the form in the row (assuming the form is in the same row)
            var form = row.querySelector('form');
            
            // Submit the form
            form.submit();
        }

       function handleStatusChange(input) {
    // Get the row of the changed input
    var row = input.parentNode.parentNode;

    // Get the value of the status input
    var statusValue = input.value;

    // If the status is changed to 0, set other columns (except code and productName) to -1
    if (statusValue === '0') {
        // Get the lowStockThreshold input in the row
        var lowStockThresholdInput = row.querySelector('input[name^="lowStockThreshold"]');
        
        // Set the value of the lowStockThreshold input to -1
        if (lowStockThresholdInput) {
            lowStockThresholdInput.value = '-1';
        }

        // Get all the input elements in the row, excluding lowStockThreshold
        var otherInputs = row.querySelectorAll('input[name^="unitCost"], input[name^="unitPrice"], input[name^="startingInventory"]');
        
        // Set the value of each input to 0
        otherInputs.forEach(function (input) {
            input.value = '0';
        });
    }
}

    if (localStorage.getItem("TOKEN") === null) {
        document.getElementById("body").style.display = "none"
        alert("You don't have permission to access this page.");
            window.history.back();
    }

  


        // Event listener for the "Add Row" button
       /*  document.querySelector("#addRowButton").addEventListener("click", addRow); */
        document.querySelector("#cancelProduct").addEventListener("click", hideNewRow);

    
    let accType = parseJwt(localStorage.getItem("TOKEN")).type
    console.log(accType)
    if (localStorage.getItem("TOKEN")) {
        if (accType === "Admin") {
            accBtn.style.display = "flex"
        } else {
            console.log("Should not")
            accBtn.style.display = "none"
        }
    }

        </script>
    </body>
</html>
